import type { CreateBackendApiOptions } from './api';
import type { CreateAuthenticateRequestOptions } from './tokens';
export { createIsomorphicRequest } from './util/IsomorphicRequest';
export * from './api/resources';
export * from './tokens';
export * from './tokens/jwt';
export * from './tokens/verify';
export { constants } from './constants';
export { redirect } from './redirections';
export { buildRequestUrl } from './utils';
export type ClerkOptions = CreateBackendApiOptions & Partial<Pick<CreateAuthenticateRequestOptions['options'], 'audience' | 'jwtKey' | 'proxyUrl' | 'secretKey' | 'publishableKey' | 'domain' | 'isSatellite'>>;
export declare function Clerk(options: ClerkOptions): {
    /**
     * @deprecated This prop has been deprecated and will be removed in the next major release.
     */
    __unstable_options: {
        apiKey?: string | undefined;
        secretKey?: string | undefined;
        apiUrl?: string | undefined;
        apiVersion?: string | undefined;
        userAgent?: string | undefined;
        httpOptions?: RequestInit | undefined;
        proxyUrl?: string | undefined;
        publishableKey?: string | undefined;
        isSatellite?: boolean | undefined;
        domain?: string | undefined;
        audience?: string | string[] | undefined;
        jwtKey?: string | undefined;
    };
    authenticateRequest: ({ apiKey: runtimeApiKey, secretKey: runtimeSecretKey, audience: runtimeAudience, frontendApi: runtimeFrontendApi, proxyUrl: runtimeProxyUrl, publishableKey: runtimePublishableKey, jwtKey: runtimeJwtKey, isSatellite: runtimeIsSatellite, domain: runtimeDomain, searchParams, ...rest }: Omit<import("./tokens").AuthenticateRequestOptions, "apiUrl" | "apiVersion">) => Promise<import("./tokens").RequestState>;
    localInterstitial: ({ frontendApi: runtimeFrontendApi, publishableKey: runtimePublishableKey, proxyUrl: runtimeProxyUrl, isSatellite: runtimeIsSatellite, domain: runtimeDomain, ...rest }: Omit<import("./tokens/interstitial").LoadInterstitialOptions, "apiUrl">) => string;
    remotePublicInterstitial: ({ frontendApi: runtimeFrontendApi, publishableKey: runtimePublishableKey, proxyUrl: runtimeProxyUrl, isSatellite: runtimeIsSatellite, domain: runtimeDomain, ...rest }: import("./tokens/interstitial").LoadInterstitialOptions) => Promise<string>;
    remotePrivateInterstitial: () => Promise<string>;
    remotePublicInterstitialUrl: typeof import("./tokens/interstitial").buildPublicInterstitialUrl;
    debugRequestState: (params: import("./tokens").RequestState) => {
        frontendApi: string;
        isSignedIn: boolean;
        proxyUrl: string | undefined;
        isInterstitial: boolean;
        reason: import("./tokens/authStatus").AuthReason | null;
        message: string | null;
        publishableKey: string;
        isSatellite: boolean;
        domain: string;
    };
    allowlistIdentifiers: import("./api/endpoints").AllowlistIdentifierAPI;
    clients: import("./api/endpoints").ClientAPI;
    emailAddresses: import("./api/endpoints").EmailAddressAPI;
    emails: import("./api/endpoints").EmailAPI;
    interstitial: import("./api/endpoints").InterstitialAPI;
    invitations: import("./api/endpoints").InvitationAPI;
    organizations: import("./api/endpoints").OrganizationAPI;
    phoneNumbers: import("./api/endpoints").PhoneNumberAPI;
    redirectUrls: import("./api/endpoints").RedirectUrlAPI;
    sessions: import("./api/endpoints").SessionAPI;
    signInTokens: import("./api/endpoints").SignInTokenAPI;
    smsMessages: import("./api/endpoints").SMSMessageAPI;
    users: import("./api/endpoints").UserAPI;
    domains: import("./api/endpoints").DomainAPI;
};
//# sourceMappingURL=index.d.ts.map