import type { Jwt, JwtPayload } from '@clerk/types';
type IssuerResolver = string | ((iss: string) => boolean);
export declare function hasValidSignature(jwt: Jwt, jwk: JsonWebKey): Promise<boolean>;
export declare function decodeJwt(token: string): Jwt;
export type VerifyJwtOptions = {
    audience?: string | string[];
    authorizedParties?: string[];
    /**
     * @deprecated This option incorrectly accepts milliseconds instead of seconds and has been deprecated. Use clockSkewInMs instead.
     */
    clockSkewInSeconds?: number;
    clockSkewInMs?: number;
    issuer: IssuerResolver | string | null;
    key: JsonWebKey;
};
export declare function verifyJwt(token: string, { audience, authorizedParties, clockSkewInSeconds, clockSkewInMs, issuer, key }: VerifyJwtOptions): Promise<JwtPayload>;
export {};
//# sourceMappingURL=verifyJwt.d.ts.map