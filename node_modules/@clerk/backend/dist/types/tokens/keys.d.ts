/**
 *
 * Loads a local PEM key usually from process.env and transform it to JsonWebKey format.
 * The result is also cached on the module level to avoid unnecessary computations in subsequent invocations.
 *
 * @param {string} localKey
 * @returns {JsonWebKey} key
 */
export declare function loadClerkJWKFromLocal(localKey?: string): JsonWebKey;
export type LoadClerkJWKFromRemoteOptions = {
    kid: string;
    jwksCacheTtlInMs?: number;
    skipJwksCache?: boolean;
    secretKey?: string;
    /**
     * @deprecated Use `secretKey` instead.
     */
    apiKey?: string;
    apiUrl?: string;
    apiVersion?: string;
    issuer?: string;
};
/**
 *
 * Loads a key from JWKS retrieved from the well-known Frontend API endpoint of the issuer.
 * The result is also cached on the module level to avoid network requests in subsequent invocations.
 * The cache lasts 1 hour by default.
 *
 * @param {Object} options
 * @param {string} options.issuer - The issuer origin of the JWT
 * @param {string} options.kid - The id of the key that the JWT was signed with
 * @param {string} options.alg - The algorithm of the JWT
 * @param {number} options.jwksCacheTtlInMs - The TTL of the jwks cache (defaults to 1 hour)
 * @returns {JsonWebKey} key
 */
export declare function loadClerkJWKFromRemote({ apiKey, secretKey, apiUrl, apiVersion, issuer, kid, jwksCacheTtlInMs, // 1 hour,
skipJwksCache, }: LoadClerkJWKFromRemoteOptions): Promise<JsonWebKey>;
//# sourceMappingURL=keys.d.ts.map