import type { JwtPayload } from '@clerk/types';
import type { SignedInAuthObject, SignedOutAuthObject } from './authObjects';
import type { TokenVerificationErrorReason } from './errors';
export declare enum AuthStatus {
    SignedIn = "signed-in",
    SignedOut = "signed-out",
    Interstitial = "interstitial",
    Unknown = "unknown"
}
export type SignedInState = {
    status: AuthStatus.SignedIn;
    reason: null;
    message: null;
    frontendApi: string;
    proxyUrl?: string;
    publishableKey: string;
    isSatellite: boolean;
    domain: string;
    signInUrl: string;
    isSignedIn: true;
    isInterstitial: false;
    isUnknown: false;
    toAuth: () => SignedInAuthObject;
};
export type SignedOutState = {
    status: AuthStatus.SignedOut;
    message: string;
    reason: AuthReason;
    frontendApi: string;
    proxyUrl?: string;
    publishableKey: string;
    isSatellite: boolean;
    domain: string;
    signInUrl: string;
    isSignedIn: false;
    isInterstitial: false;
    isUnknown: false;
    toAuth: () => SignedOutAuthObject;
};
export type InterstitialState = Omit<SignedOutState, 'isInterstitial' | 'status' | 'toAuth'> & {
    status: AuthStatus.Interstitial;
    isInterstitial: true;
    toAuth: () => null;
};
export type UnknownState = Omit<InterstitialState, 'status' | 'isInterstitial' | 'isUnknown'> & {
    status: AuthStatus.Unknown;
    isInterstitial: false;
    isUnknown: true;
};
export declare enum AuthErrorReason {
    CookieAndUATMissing = "cookie-and-uat-missing",
    CookieMissing = "cookie-missing",
    CookieOutDated = "cookie-outdated",
    CookieUATMissing = "uat-missing",
    CrossOriginReferrer = "cross-origin-referrer",
    HeaderMissingCORS = "header-missing-cors",
    HeaderMissingNonBrowser = "header-missing-non-browser",
    SatelliteCookieNeedsSyncing = "satellite-needs-syncing",
    SatelliteReturnsFromPrimary = "satellite-returns-from-primary",
    PrimaryRespondsToSyncing = "primary-responds-to-syncing",
    StandardSignedIn = "standard-signed-in",
    StandardSignedOut = "standard-signed-out",
    UnexpectedError = "unexpected-error",
    Unknown = "unknown"
}
export type AuthReason = AuthErrorReason | TokenVerificationErrorReason;
export type RequestState = SignedInState | SignedOutState | InterstitialState | UnknownState;
export declare function signedIn<T>(options: T, sessionClaims: JwtPayload): Promise<SignedInState>;
export declare function signedOut<T>(options: T, reason: AuthReason, message?: string): SignedOutState;
export declare function interstitial<T>(options: T, reason: AuthReason, message?: string): InterstitialState;
export declare function unknownState<T>(options: T, reason: AuthReason, message?: string): UnknownState;
//# sourceMappingURL=authStatus.d.ts.map