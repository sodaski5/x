import type { OAuthProvider } from '@clerk/types';
import type { OauthAccessToken, OrganizationMembership, User } from '../resources';
import { AbstractAPI } from './AbstractApi';
type UserCountParams = {
    emailAddress?: string[];
    phoneNumber?: string[];
    username?: string[];
    web3Wallet?: string[];
    query?: string;
    userId?: string[];
    externalId?: string[];
};
type UserListParams = UserCountParams & {
    limit?: number;
    offset?: number;
    orderBy?: 'created_at' | 'updated_at' | '+created_at' | '+updated_at' | '-created_at' | '-updated_at';
};
type UserMetadataParams = {
    publicMetadata?: UserPublicMetadata;
    privateMetadata?: UserPrivateMetadata;
    unsafeMetadata?: UserUnsafeMetadata;
};
type PasswordHasher = 'argon2i' | 'argon2id' | 'bcrypt' | 'md5' | 'pbkdf2_sha256' | 'pbkdf2_sha256_django' | 'pbkdf2_sha1' | 'scrypt_firebase';
type UserPasswordHashingParams = {
    passwordDigest: string;
    passwordHasher: PasswordHasher;
};
type CreateUserParams = {
    externalId?: string;
    emailAddress?: string[];
    phoneNumber?: string[];
    username?: string;
    password?: string;
    firstName?: string;
    lastName?: string;
    skipPasswordChecks?: boolean;
    skipPasswordRequirement?: boolean;
    totpSecret?: string;
    backupCodes?: string[];
} & UserMetadataParams & (UserPasswordHashingParams | {});
interface UpdateUserParams extends UserMetadataParams {
    firstName?: string;
    lastName?: string;
    username?: string;
    password?: string;
    skipPasswordChecks?: boolean;
    signOutOfOtherSessions?: boolean;
    primaryEmailAddressID?: string;
    primaryPhoneNumberID?: string;
    primaryWeb3WalletID?: string;
    profileImageID?: string;
    totpSecret?: string;
    backupCodes?: string[];
    externalId?: string;
    createdAt?: Date;
}
type GetOrganizationMembershipListParams = {
    userId: string;
    limit?: number;
    offset?: number;
};
type VerifyPasswordParams = {
    userId: string;
    password: string;
};
type VerifyTOTPParams = {
    userId: string;
    code: string;
};
export declare class UserAPI extends AbstractAPI {
    getUserList(params?: UserListParams): Promise<User[]>;
    getUser(userId: string): Promise<User>;
    createUser(params: CreateUserParams): Promise<User>;
    updateUser(userId: string, params?: UpdateUserParams): Promise<User>;
    updateUserProfileImage(userId: string, params: {
        file: Blob | File;
    }): Promise<User>;
    updateUserMetadata(userId: string, params: UserMetadataParams): Promise<User>;
    deleteUser(userId: string): Promise<User>;
    getCount(params?: UserListParams): Promise<number>;
    getUserOauthAccessToken(userId: string, provider: `oauth_${OAuthProvider}`): Promise<OauthAccessToken[]>;
    disableUserMFA(userId: string): Promise<User>;
    getOrganizationMembershipList(params: GetOrganizationMembershipListParams): Promise<OrganizationMembership[]>;
    verifyPassword(params: VerifyPasswordParams): Promise<{
        verified: true;
    }>;
    verifyTOTP(params: VerifyTOTPParams): Promise<{
        verified: true;
        code_type: 'totp';
    }>;
}
export {};
//# sourceMappingURL=UserApi.d.ts.map