import type { ClerkAPIError } from '@clerk/types';
import type { CreateBackendApiOptions } from './factory';
export type ClerkBackendApiRequestOptions = {
    method: 'GET' | 'POST' | 'PATCH' | 'DELETE' | 'PUT';
    queryParams?: Record<string, unknown>;
    headerParams?: Record<string, string>;
    bodyParams?: object;
    formData?: FormData;
} & ({
    url: string;
    path?: string;
} | {
    url?: string;
    path: string;
});
export type ClerkBackendApiResponse<T> = {
    data: T;
    errors: null;
} | {
    data: null;
    errors: ClerkAPIError[];
};
export type RequestFunction = ReturnType<typeof buildRequest>;
type LegacyRequestFunction = <T>(requestOptions: ClerkBackendApiRequestOptions) => Promise<T>;
export declare function buildRequest(options: CreateBackendApiOptions): LegacyRequestFunction;
export {};
//# sourceMappingURL=request.d.ts.map