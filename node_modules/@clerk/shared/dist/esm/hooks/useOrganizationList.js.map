{"version":3,"sources":["../../../src/hooks/useOrganizationList.tsx"],"sourcesContent":["import type {\n  CreateOrganizationParams,\n  OrganizationMembershipResource,\n  OrganizationResource,\n  SetActive,\n} from '@clerk/types';\n\nimport { useClerkInstanceContext, useUserContext } from './contexts';\n\ntype OrganizationList = ReturnType<typeof createOrganizationList>;\n\ntype UseOrganizationListReturn =\n  | { isLoaded: false; organizationList: undefined; createOrganization: undefined; setActive: undefined }\n  | {\n      isLoaded: true;\n      organizationList: OrganizationList;\n      createOrganization: (params: CreateOrganizationParams) => Promise<OrganizationResource>;\n      setActive: SetActive;\n    };\n\ntype UseOrganizationList = () => UseOrganizationListReturn;\n\nexport const useOrganizationList: UseOrganizationList = () => {\n  const clerk = useClerkInstanceContext();\n  const user = useUserContext();\n\n  // TODO: Properly check for SSR user values\n  if (!clerk.loaded || !user) {\n    return { isLoaded: false, organizationList: undefined, createOrganization: undefined, setActive: undefined };\n  }\n\n  return {\n    isLoaded: true,\n    organizationList: createOrganizationList(user.organizationMemberships),\n    setActive: clerk.setActive,\n    createOrganization: clerk.createOrganization,\n  };\n};\n\nfunction createOrganizationList(organizationMemberships: OrganizationMembershipResource[]) {\n  return organizationMemberships.map(organizationMembership => ({\n    membership: organizationMembership,\n    organization: organizationMembership.organization,\n  }));\n}\n"],"mappings":"AAOA,SAAS,yBAAyB,sBAAsB;AAejD,MAAM,sBAA2C,MAAM;AAC5D,QAAM,QAAQ,wBAAwB;AACtC,QAAM,OAAO,eAAe;AAG5B,MAAI,CAAC,MAAM,UAAU,CAAC,MAAM;AAC1B,WAAO,EAAE,UAAU,OAAO,kBAAkB,QAAW,oBAAoB,QAAW,WAAW,OAAU;AAAA,EAC7G;AAEA,SAAO;AAAA,IACL,UAAU;AAAA,IACV,kBAAkB,uBAAuB,KAAK,uBAAuB;AAAA,IACrE,WAAW,MAAM;AAAA,IACjB,oBAAoB,MAAM;AAAA,EAC5B;AACF;AAEA,SAAS,uBAAuB,yBAA2D;AACzF,SAAO,wBAAwB,IAAI,6BAA2B;AAAA,IAC5D,YAAY;AAAA,IACZ,cAAc,uBAAuB;AAAA,EACvC,EAAE;AACJ;","names":[]}