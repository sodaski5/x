{"version":3,"sources":["../../src/instance.ts","../../src/clerkClient.ts","../../src/authenticateRequest.ts","../../src/shared.ts","../../src/utils.ts","../../src/clerkExpressRequireAuth.ts","../../src/clerkExpressWithAuth.ts"],"sourcesContent":["import { Clerk } from './clerkClient';\n\nexport default Clerk;\n\nexport type { WithAuthProp, RequireAuthProp } from './types';\n\nexport {\n  AllowlistIdentifier,\n  Client,\n  Email,\n  EmailAddress,\n  ExternalAccount,\n  IdentificationLink,\n  Invitation,\n  Organization,\n  OrganizationInvitation,\n  OrganizationMembership,\n  OrganizationMembershipPublicUserData,\n  PhoneNumber,\n  Session,\n  SMSMessage,\n  User,\n  Verification,\n} from '@clerk/backend';\n","import type { ClerkOptions, VerifyTokenOptions } from '@clerk/backend';\nimport { Clerk as _Clerk, decodeJwt, verifyToken as _verifyToken } from '@clerk/backend';\n\nimport { createClerkExpressRequireAuth } from './clerkExpressRequireAuth';\nimport { createClerkExpressWithAuth } from './clerkExpressWithAuth';\nimport { loadApiEnv, loadClientEnv } from './utils';\n\n/**\n * This needs to be a *named* function in order to support the older\n * new Clerk() syntax for v4 compatibility.\n * Arrow functions can never be called with the new keyword because they do not have the [[Construct]] method\n */\nexport function Clerk(options: ClerkOptions) {\n  const clerkClient = _Clerk(options);\n  const expressWithAuth = createClerkExpressWithAuth({ ...options, clerkClient });\n  const expressRequireAuth = createClerkExpressRequireAuth({ ...options, clerkClient });\n  const verifyToken = (token: string, verifyOpts?: VerifyTokenOptions) => {\n    const issuer = (iss: string) => iss.startsWith('https://clerk.') || iss.includes('.clerk.accounts');\n    return _verifyToken(token, { issuer, ...options, ...verifyOpts });\n  };\n\n  return {\n    ...clerkClient,\n    expressWithAuth,\n    expressRequireAuth,\n    verifyToken,\n    ...createBasePropForRedwoodCompatibility(),\n  };\n}\n\nconst createBasePropForRedwoodCompatibility = () => {\n  const verifySessionToken = (token: string) => {\n    const { jwtKey } = loadApiEnv();\n    const { payload } = decodeJwt(token);\n    return _verifyToken(token, {\n      issuer: payload.iss,\n      jwtKey,\n    });\n  };\n  return { base: { verifySessionToken } };\n};\n\nexport const createClerkClient = Clerk;\n\nlet clerkClientSingleton = {} as unknown as ReturnType<typeof Clerk>;\n\nexport const clerkClient = new Proxy(clerkClientSingleton, {\n  get(_target, property) {\n    const hasBeenInitialised = !!clerkClientSingleton.authenticateRequest;\n    if (hasBeenInitialised) {\n      // @ts-expect-error\n      return clerkClientSingleton[property];\n    }\n\n    const env = { ...loadApiEnv(), ...loadClientEnv() };\n    if (env.secretKey) {\n      clerkClientSingleton = Clerk({ ...env, userAgent: '@clerk/clerk-sdk-node' });\n      // @ts-expect-error\n      return clerkClientSingleton[property];\n    }\n\n    // @ts-expect-error\n    return Clerk({ ...env, userAgent: '@clerk/clerk-sdk-node' })[property];\n  },\n  set() {\n    return false;\n  },\n});\n\n/**\n * Stand-alone express middlewares bound to the pre-initialised clerkClient\n */\nexport const ClerkExpressRequireAuth = (...args: any) => {\n  const env = { ...loadApiEnv(), ...loadClientEnv() };\n  const fn = createClerkExpressRequireAuth({ clerkClient, ...env });\n  return fn(...args);\n};\n\nexport const ClerkExpressWithAuth = (...args: any) => {\n  const env = { ...loadApiEnv(), ...loadClientEnv() };\n  const fn = createClerkExpressWithAuth({ clerkClient, ...env });\n  return fn(...args);\n};\n\n/**\n * Stand-alone setters bound to the pre-initialised clerkClient\n */\nexport const setClerkApiKey = (value: string) => {\n  clerkClient.__unstable_options.apiKey = value;\n};\n\nexport const setClerkServerApiUrl = (value: string) => {\n  clerkClient.__unstable_options.apiUrl = value;\n};\n\nexport const setClerkApiVersion = (value: string) => {\n  clerkClient.__unstable_options.apiVersion = value;\n};\n\nexport const setClerkHttpOptions = (value: RequestInit) => {\n  clerkClient.__unstable_options.httpOptions = value;\n};\n","import type { RequestState } from '@clerk/backend';\nimport { constants, createIsomorphicRequest } from '@clerk/backend';\nimport type { IncomingMessage, ServerResponse } from 'http';\n\nimport { handleValueOrFn, isHttpOrHttps, isProxyUrlRelative, isValidProxyUrl } from './shared';\nimport type { AuthenticateRequestParams, ClerkClient } from './types';\nimport { loadApiEnv, loadClientEnv } from './utils';\n\nexport async function loadInterstitial({\n  clerkClient,\n  requestState,\n}: {\n  clerkClient: ClerkClient;\n  requestState: RequestState;\n}) {\n  const { clerkJSVersion, clerkJSUrl } = loadClientEnv();\n  /**\n   * When publishable key or frontendApi is present utilize the localInterstitial method\n   * and avoid the extra network call\n   */\n  if (requestState.publishableKey || requestState.frontendApi) {\n    return clerkClient.localInterstitial({\n      frontendApi: requestState.frontendApi,\n      publishableKey: requestState.publishableKey,\n      proxyUrl: requestState.proxyUrl,\n      signInUrl: requestState.signInUrl,\n      isSatellite: requestState.isSatellite,\n      domain: requestState.domain,\n      clerkJSVersion,\n      clerkJSUrl,\n    });\n  }\n  return await clerkClient.remotePrivateInterstitial();\n}\n\nexport const authenticateRequest = (opts: AuthenticateRequestParams) => {\n  const { clerkClient, apiKey, secretKey, frontendApi, publishableKey, req, options } = opts;\n  const { jwtKey, authorizedParties, audience } = options || {};\n\n  const env = { ...loadApiEnv(), ...loadClientEnv() };\n\n  const requestUrl = getRequestUrl(req);\n  const isSatellite = handleValueOrFn(options?.isSatellite, requestUrl, env.isSatellite);\n  const domain = handleValueOrFn(options?.domain, requestUrl) || env.domain;\n  const signInUrl = options?.signInUrl || env.signInUrl;\n  const proxyUrl = absoluteProxyUrl(\n    handleValueOrFn(options?.proxyUrl, requestUrl, env.proxyUrl),\n    requestUrl.toString(),\n  );\n\n  if (isSatellite && !proxyUrl && !domain) {\n    throw new Error(satelliteAndMissingProxyUrlAndDomain);\n  }\n\n  if (isSatellite && !isHttpOrHttps(signInUrl) && isDevelopmentFromApiKey(secretKey || apiKey || '')) {\n    throw new Error(satelliteAndMissingSignInUrl);\n  }\n\n  return clerkClient.authenticateRequest({\n    audience,\n    apiKey,\n    secretKey,\n    frontendApi,\n    publishableKey,\n    jwtKey,\n    authorizedParties,\n    proxyUrl,\n    isSatellite,\n    domain,\n    signInUrl,\n    request: createIsomorphicRequest((Request, Headers) => {\n      const headers = Object.keys(req.headers).reduce(\n        (acc, key) => Object.assign(acc, { [key]: req?.headers[key] }),\n        {},\n      );\n      return new Request(requestUrl, {\n        method: req.method,\n        headers: new Headers(headers),\n      });\n    }),\n  });\n};\nexport const handleUnknownCase = (res: ServerResponse, requestState: RequestState) => {\n  if (requestState.isUnknown) {\n    res.writeHead(401, { 'Content-Type': 'text/html' });\n    res.end();\n  }\n};\n\nexport const handleInterstitialCase = (res: ServerResponse, requestState: RequestState, interstitial: string) => {\n  if (requestState.isInterstitial) {\n    res.writeHead(401, { 'Content-Type': 'text/html' });\n    res.end(interstitial);\n  }\n};\n\nexport const decorateResponseWithObservabilityHeaders = (res: ServerResponse, requestState: RequestState) => {\n  requestState.message && res.setHeader(constants.Headers.AuthMessage, encodeURIComponent(requestState.message));\n  requestState.reason && res.setHeader(constants.Headers.AuthReason, encodeURIComponent(requestState.reason));\n  requestState.status && res.setHeader(constants.Headers.AuthStatus, encodeURIComponent(requestState.status));\n};\n\nconst isDevelopmentFromApiKey = (apiKey: string): boolean =>\n  apiKey.startsWith('test_') || apiKey.startsWith('sk_test_');\n\nconst getRequestUrl = (req: IncomingMessage): URL => {\n  return new URL(req.url as string, `${getRequestProto(req)}://${req.headers.host}`);\n};\n\nconst getRequestProto = (req: IncomingMessage): string => {\n  // @ts-ignore Optimistic attempt to get the protocol in case\n  // req extends IncomingMessage in a useful way. No guarantee\n  // it'll work.\n  const mightWork = req.connection?.encrypted ? 'https' : 'http';\n  // The x-forwarded-proto header takes precedence.\n  const proto = (req.headers[constants.Headers.ForwardedProto] as string) || mightWork;\n  if (!proto) {\n    throw new Error(missingProto);\n  }\n  // Sometimes the x-forwarded-proto header does not come as a\n  // single value.\n  return proto.split(',')[0].trim();\n};\n\nconst absoluteProxyUrl = (relativeOrAbsoluteUrl: string, baseUrl: string): string => {\n  if (!relativeOrAbsoluteUrl || !isValidProxyUrl(relativeOrAbsoluteUrl) || !isProxyUrlRelative(relativeOrAbsoluteUrl)) {\n    return relativeOrAbsoluteUrl;\n  }\n  return new URL(relativeOrAbsoluteUrl, baseUrl).toString();\n};\n\nconst satelliteAndMissingProxyUrlAndDomain =\n  'Missing domain and proxyUrl. A satellite application needs to specify a domain or a proxyUrl';\nconst satelliteAndMissingSignInUrl = `\nInvalid signInUrl. A satellite application requires a signInUrl for development instances.\nCheck if signInUrl is missing from your configuration or if it is not an absolute URL.`;\nconst missingProto =\n  \"Cannot determine the request protocol. Please ensure you've set the X-Forwarded-Proto header with the request protocol (http or https).\";\n","/**\n * These functions originate from @clerk/shared\n * Maintain these until @clerk/shared does not depend on react\n */\nexport function isValidProxyUrl(key: string | undefined) {\n  if (!key) {\n    return true;\n  }\n\n  return isHttpOrHttps(key) || isProxyUrlRelative(key);\n}\n\nexport function isHttpOrHttps(key: string | undefined) {\n  return /^http(s)?:\\/\\//.test(key || '');\n}\n\nexport function isProxyUrlRelative(key: string) {\n  return key.startsWith('/');\n}\n\nexport function proxyUrlToAbsoluteURL(url: string | undefined): string {\n  if (!url) {\n    return '';\n  }\n  return isProxyUrlRelative(url) ? new URL(url, window.location.origin).toString() : url;\n}\n\ntype VOrFnReturnsV<T> = T | undefined | ((v: URL) => T);\nexport function handleValueOrFn<T>(value: VOrFnReturnsV<T>, url: URL): T | undefined;\nexport function handleValueOrFn<T>(value: VOrFnReturnsV<T>, url: URL, defaultValue: T): T;\nexport function handleValueOrFn<T>(value: VOrFnReturnsV<T>, url: URL, defaultValue?: unknown): unknown {\n  if (typeof value === 'function') {\n    return (value as (v: URL) => T)(url);\n  }\n\n  if (typeof value !== 'undefined') {\n    return value;\n  }\n\n  if (typeof defaultValue !== 'undefined') {\n    return defaultValue;\n  }\n\n  return undefined;\n}\n","import type { IncomingMessage, ServerResponse } from 'http';\n\n// https://nextjs.org/docs/api-routes/api-middlewares#connectexpress-middleware-support\nexport function runMiddleware(req: IncomingMessage, res: ServerResponse, fn: (...args: any) => any) {\n  return new Promise((resolve, reject) => {\n    // @ts-ignore\n    void fn(req, res, result => {\n      if (result instanceof Error) {\n        return reject(result);\n      }\n      return resolve(result);\n    });\n  });\n}\n\nexport const loadClientEnv = () => {\n  return {\n    publishableKey: process.env.CLERK_PUBLISHABLE_KEY || '',\n    frontendApi: process.env.CLERK_FRONTEND_API || '',\n    clerkJSUrl: process.env.CLERK_JS || '',\n    clerkJSVersion: process.env.CLERK_JS_VERSION || '',\n  };\n};\n\nexport const loadApiEnv = () => {\n  return {\n    secretKey: process.env.CLERK_SECRET_KEY || process.env.CLERK_API_KEY || '',\n    apiKey: process.env.CLERK_SECRET_KEY || process.env.CLERK_API_KEY || '',\n    apiUrl: process.env.CLERK_API_URL || 'https://api.clerk.dev',\n    apiVersion: process.env.CLERK_API_VERSION || 'v1',\n    domain: process.env.CLERK_DOMAIN || '',\n    proxyUrl: process.env.CLERK_PROXY_URL || '',\n    signInUrl: process.env.CLERK_SIGN_IN_URL || '',\n    isSatellite: process.env.CLERK_IS_SATELLITE === 'true',\n    jwtKey: process.env.CLERK_JWT_KEY || '',\n  };\n};\n","import type { Clerk } from '@clerk/backend';\n\nimport {\n  authenticateRequest,\n  decorateResponseWithObservabilityHeaders,\n  handleInterstitialCase,\n  handleUnknownCase,\n  loadInterstitial,\n} from './authenticateRequest';\nimport type { ClerkMiddlewareOptions, MiddlewareRequireAuthProp, RequireAuthProp } from './types';\n\nexport type CreateClerkExpressMiddlewareOptions = {\n  clerkClient: ReturnType<typeof Clerk>;\n  /**\n   * @deprecated Use `secretKey` instead.\n   */\n  apiKey?: string;\n  /* Secret Key */\n  secretKey?: string;\n  /**\n   * @deprecated Use `publishableKey` instead.\n   */\n  frontendApi?: string;\n  publishableKey?: string;\n  apiUrl?: string;\n};\n\nexport const createClerkExpressRequireAuth = (createOpts: CreateClerkExpressMiddlewareOptions) => {\n  const { clerkClient, frontendApi = '', apiKey = '', secretKey = '', publishableKey = '' } = createOpts;\n\n  return (options: ClerkMiddlewareOptions = {}): MiddlewareRequireAuthProp => {\n    return async (req, res, next) => {\n      const requestState = await authenticateRequest({\n        clerkClient,\n        apiKey,\n        secretKey,\n        frontendApi,\n        publishableKey,\n        req,\n        options,\n      });\n      decorateResponseWithObservabilityHeaders(res, requestState);\n      if (requestState.isUnknown) {\n        return handleUnknownCase(res, requestState);\n      }\n      if (requestState.isInterstitial) {\n        const interstitial = await loadInterstitial({\n          clerkClient,\n          requestState,\n        });\n        return handleInterstitialCase(res, requestState, interstitial);\n      }\n\n      if (requestState.isSignedIn) {\n        (req as RequireAuthProp<any>).auth = { ...requestState.toAuth(), claims: requestState.toAuth().sessionClaims };\n        next();\n        return;\n      }\n\n      next(new Error('Unauthenticated'));\n    };\n  };\n};\n","import {\n  authenticateRequest,\n  decorateResponseWithObservabilityHeaders,\n  handleInterstitialCase,\n  handleUnknownCase,\n  loadInterstitial,\n} from './authenticateRequest';\nimport type { CreateClerkExpressMiddlewareOptions } from './clerkExpressRequireAuth';\nimport type { ClerkMiddlewareOptions, MiddlewareWithAuthProp, WithAuthProp } from './types';\n\nexport const createClerkExpressWithAuth = (createOpts: CreateClerkExpressMiddlewareOptions) => {\n  const { clerkClient, frontendApi = '', apiKey = '', secretKey = '', publishableKey = '' } = createOpts;\n  return (options: ClerkMiddlewareOptions = {}): MiddlewareWithAuthProp => {\n    return async (req, res, next) => {\n      const requestState = await authenticateRequest({\n        clerkClient,\n        apiKey,\n        secretKey,\n        frontendApi,\n        publishableKey,\n        req,\n        options,\n      });\n      decorateResponseWithObservabilityHeaders(res, requestState);\n      if (requestState.isUnknown) {\n        return handleUnknownCase(res, requestState);\n      }\n      if (requestState.isInterstitial) {\n        const interstitial = await loadInterstitial({\n          clerkClient,\n          requestState,\n        });\n        return handleInterstitialCase(res, requestState, interstitial);\n      }\n\n      (req as WithAuthProp<any>).auth = {\n        ...requestState.toAuth(),\n        claims: requestState.toAuth().sessionClaims,\n      };\n      next();\n    };\n  };\n};\n"],"mappings":"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","names":["import_backend","clerkClient","clerkClient","clerkClient","clerkClient","_Clerk","_verifyToken","import_backend"]}