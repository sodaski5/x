{"version":3,"sources":["../../src/index.ts","../../src/withAuth.ts","../../src/requireAuth.ts"],"sourcesContent":["import {\n  Clerk,\n  clerkClient,\n  ClerkExpressRequireAuth,\n  ClerkExpressWithAuth,\n  createClerkClient,\n  setClerkApiKey,\n  setClerkApiVersion,\n  setClerkHttpOptions,\n  setClerkServerApiUrl,\n} from './clerkClient';\nimport { createClerkExpressRequireAuth } from './clerkExpressRequireAuth';\nimport { createClerkExpressWithAuth } from './clerkExpressWithAuth';\nimport type {\n  ClerkMiddleware,\n  ClerkMiddlewareOptions,\n  LooseAuthProp,\n  RequireAuthProp,\n  StrictAuthProp,\n  WithAuthProp,\n} from './types';\n\nexport * from '@clerk/backend';\n/**\n * The order of these exports is important, as we want Clerk from clerk/sdk-node\n * to shadow the Clerk export from clerk/backend, because it needs to support\n * 2 additional apis: clerk.expressWithAuth, clerk.expressRequireAuth\n */\nexport {\n  createClerkClient,\n  clerkClient,\n  setClerkApiKey,\n  setClerkApiVersion,\n  setClerkHttpOptions,\n  setClerkServerApiUrl,\n  Clerk,\n  ClerkExpressRequireAuth,\n  ClerkExpressWithAuth,\n};\n\nconst {\n  users,\n  smsMessages,\n  sessions,\n  emailAddresses,\n  phoneNumbers,\n  emails,\n  invitations,\n  organizations,\n  clients,\n  allowlistIdentifiers,\n  domains,\n} = clerkClient;\n\nexport {\n  users,\n  smsMessages,\n  sessions,\n  emailAddresses,\n  phoneNumbers,\n  emails,\n  invitations,\n  organizations,\n  clients,\n  allowlistIdentifiers,\n  domains,\n};\n\nexport default clerkClient;\n\nexport type { LooseAuthProp, StrictAuthProp, WithAuthProp, RequireAuthProp, ClerkMiddleware, ClerkMiddlewareOptions };\n\nexport { createClerkExpressRequireAuth };\nexport { createClerkExpressWithAuth };\n\nexport { withAuth } from './withAuth';\nexport { requireAuth } from './requireAuth';\n","import type { Request, Response } from 'express';\n\nimport { clerkClient } from './clerkClient';\nimport { createClerkExpressWithAuth } from './clerkExpressWithAuth';\nimport type { ClerkMiddlewareOptions, WithAuthProp } from './types';\nimport { runMiddleware } from './utils';\n\ntype ApiHandlerWithAuth<TRequest, TResponse> = (req: WithAuthProp<TRequest>, res: TResponse) => void | Promise<void>;\n\n// TODO: drop the Request/Response default values in v5 version\nexport function withAuth<TRequest extends Request = Request, TResponse extends Response = Response>(\n  handler: ApiHandlerWithAuth<TRequest, TResponse>,\n  options?: ClerkMiddlewareOptions,\n): any {\n  return async (req: TRequest, res: TResponse) => {\n    await runMiddleware(req, res, createClerkExpressWithAuth({ clerkClient })(options));\n\n    return handler(req as WithAuthProp<TRequest>, res);\n  };\n}\n","import type { Request, Response } from 'express';\n\nimport { clerkClient } from './clerkClient';\nimport { createClerkExpressRequireAuth } from './clerkExpressRequireAuth';\nimport type { ClerkMiddlewareOptions, RequireAuthProp } from './types';\nimport { runMiddleware } from './utils';\n\ntype ExpressApiHandlerRequireAuth<T = any> = (req: RequireAuthProp<Request>, res: Response<T>) => void | Promise<void>;\n\nexport function requireAuth(handler: ExpressApiHandlerRequireAuth, options?: ClerkMiddlewareOptions): any {\n  return async (req: Request, res: Response) => {\n    await runMiddleware(req, res, createClerkExpressRequireAuth({ clerkClient })(options));\n\n    return handler(req as RequireAuthProp<Request>, res);\n  };\n}\n"],"mappings":";;;;;;;;;;;;;;;;AAsBA,cAAc;;;ACZP,SAAS,SACd,SACA,SACK;AACL,SAAO,OAAO,KAAe,QAAmB;AAC9C,UAAM,cAAc,KAAK,KAAK,2BAA2B,EAAE,YAAY,CAAC,EAAE,OAAO,CAAC;AAElF,WAAO,QAAQ,KAA+B,GAAG;AAAA,EACnD;AACF;;;ACVO,SAAS,YAAY,SAAuC,SAAuC;AACxG,SAAO,OAAO,KAAc,QAAkB;AAC5C,UAAM,cAAc,KAAK,KAAK,8BAA8B,EAAE,YAAY,CAAC,EAAE,OAAO,CAAC;AAErF,WAAO,QAAQ,KAAiC,GAAG;AAAA,EACrD;AACF;;;AFyBA,IAAM;AAAA,EACJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,IAAI;AAgBJ,IAAO,cAAQ;","names":[]}