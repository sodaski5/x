{"version":3,"sources":["../../../src/server/utils.ts"],"sourcesContent":["import type { RequestState } from '@clerk/backend';\nimport { buildRequestUrl, constants } from '@clerk/backend';\nimport type { NextRequest } from 'next/server';\nimport { NextResponse } from 'next/server';\n\nimport { constants as nextConstants } from '../constants';\nimport { API_KEY, DOMAIN, IS_SATELLITE, PROXY_URL, SECRET_KEY, SIGN_IN_URL } from './clerkClient';\nimport { missingDomainAndProxy, missingSignInUrlInDev } from './errors';\nimport type { NextMiddlewareResult, RequestLike } from './types';\nimport type { WithAuthOptions } from './types';\n\ntype AuthKey = 'AuthStatus' | 'AuthMessage' | 'AuthReason';\n\nexport function setCustomAttributeOnRequest(req: RequestLike, key: string, value: string): void {\n  Object.assign(req, { [key]: value });\n}\n\nexport function getCustomAttributeFromRequest(req: RequestLike, key: string): string | null | undefined {\n  // @ts-expect-error\n  return key in req ? req[key] : undefined;\n}\n\nexport function getAuthKeyFromRequest(req: RequestLike, key: AuthKey): string | null | undefined {\n  return (\n    getCustomAttributeFromRequest(req, constants.Attributes[key]) ||\n    getHeader(req, constants.Headers[key]) ||\n    (key === 'AuthStatus' ? getQueryParam(req, constants.SearchParams.AuthStatus) : undefined)\n  );\n}\n\n// Tries to extract auth status from the request using several strategies\n// TODO: Rename Auth status and align the naming across media\nexport function getAuthStatusFromRequest(req: RequestLike): string | null | undefined {\n  return (\n    getCustomAttributeFromRequest(req, constants.Attributes.AuthStatus) ||\n    getHeader(req, constants.Headers.AuthStatus) ||\n    getQueryParam(req, constants.SearchParams.AuthStatus)\n  );\n}\n\nfunction getQueryParam(req: RequestLike, name: string): string | null | undefined {\n  if (isNextRequest(req)) {\n    return req.nextUrl.searchParams.get(name);\n  }\n\n  // Check if the request contains a parsed query object\n  // NextApiRequest does, but the IncomingMessage in the GetServerSidePropsContext case does not\n  let queryParam: string | null | undefined;\n  if ('query' in req) {\n    queryParam = req.query[name] as string | undefined;\n  }\n\n  // Fall back to query string\n  if (!queryParam) {\n    const qs = (req.url || '').split('?')[1];\n    queryParam = new URLSearchParams(qs).get(name);\n  }\n  return queryParam;\n}\n\nexport function getHeader(req: RequestLike, name: string): string | null | undefined {\n  if (isNextRequest(req)) {\n    return req.headers.get(name);\n  }\n\n  // If no header has been determined for IncomingMessage case, check if available within private `socket` headers\n  // When deployed to vercel, req.headers for API routes is a `IncomingHttpHeaders` key-val object which does not follow\n  // the Headers spec so the name is no longer case-insensitive.\n  return req.headers[name] || req.headers[name.toLowerCase()] || (req.socket as any)?._httpMessage?.getHeader(name);\n}\n\nexport function getCookie(req: RequestLike, name: string): string | undefined {\n  if (isNextRequest(req)) {\n    // Nextjs broke semver in the 13.0.0 -> 13.0.1 release, so even though\n    // this should be RequestCookie in all updated apps. In order to support apps\n    // using v13.0.0 still, we explicitly add the string type\n    // https://github.com/vercel/next.js/pull/41526\n    const reqCookieOrString = req.cookies.get(name) as ReturnType<NextRequest['cookies']['get']> | string | undefined;\n    if (!reqCookieOrString) {\n      return undefined;\n    }\n    return typeof reqCookieOrString === 'string' ? reqCookieOrString : reqCookieOrString.value;\n  }\n  return req.cookies[name];\n}\n\nfunction isNextRequest(val: unknown): val is NextRequest {\n  try {\n    const { headers, nextUrl, cookies } = (val || {}) as NextRequest;\n    return (\n      typeof headers?.get === 'function' &&\n      typeof nextUrl?.searchParams.get === 'function' &&\n      typeof cookies?.get === 'function'\n    );\n  } catch (e) {\n    return false;\n  }\n}\n\nconst OVERRIDE_HEADERS = 'x-middleware-override-headers';\nconst MIDDLEWARE_HEADER_PREFIX = 'x-middleware-request' as string;\n\nexport const setRequestHeadersOnNextResponse = (\n  res: NextResponse | Response,\n  req: NextRequest,\n  newHeaders: Record<string, string>,\n) => {\n  if (!res.headers.get(OVERRIDE_HEADERS)) {\n    // Emulate a user setting overrides by explicitly adding the required nextjs headers\n    // https://github.com/vercel/next.js/pull/41380\n    // @ts-expect-error\n    res.headers.set(OVERRIDE_HEADERS, [...req.headers.keys()]);\n    req.headers.forEach((val, key) => {\n      res.headers.set(`${MIDDLEWARE_HEADER_PREFIX}-${key}`, val);\n    });\n  }\n\n  // Now that we have normalised res to include overrides, just append the new header\n  Object.entries(newHeaders).forEach(([key, val]) => {\n    res.headers.set(OVERRIDE_HEADERS, `${res.headers.get(OVERRIDE_HEADERS)},${key}`);\n    res.headers.set(`${MIDDLEWARE_HEADER_PREFIX}-${key}`, val);\n  });\n};\n\n/**\n * Test whether the currently installed nextjs version supports overriding the request headers.\n * This feature was added in nextjs v13.0.1\n * https://github.com/vercel/next.js/pull/41380\n */\nexport const nextJsVersionCanOverrideRequestHeaders = () => {\n  try {\n    const headerKey = 'clerkTest';\n    const headerKeyInRes = `${MIDDLEWARE_HEADER_PREFIX}-${headerKey}`;\n    const res = NextResponse.next({ request: { headers: new Headers({ [headerKey]: 'true' }) } });\n    return res.headers.has(headerKeyInRes);\n  } catch (e) {\n    return false;\n  }\n};\n\nexport const injectSSRStateIntoObject = <O, T>(obj: O, authObject: T) => {\n  // Serializing the state on dev env is a temp workaround for the following issue:\n  // https://github.com/vercel/next.js/discussions/11209|Next.js\n  const __clerk_ssr_state = (\n    process.env.NODE_ENV !== 'production' ? JSON.parse(JSON.stringify({ ...authObject })) : { ...authObject }\n  ) as T;\n  return { ...obj, __clerk_ssr_state };\n};\n\n// TODO: Use the same function defined in @clerk/shared once the package is tree shakeable\ntype VOrFnReturnsV<T> = T | undefined | ((v: URL) => T);\n\nexport function handleValueOrFn<T>(value: VOrFnReturnsV<T>, url: URL): T | undefined;\nexport function handleValueOrFn<T>(value: VOrFnReturnsV<T>, url: URL, defaultValue: T): T;\nexport function handleValueOrFn<T>(value: VOrFnReturnsV<T>, url: URL, defaultValue?: unknown): unknown {\n  if (typeof value === 'function') {\n    return (value as (v: URL) => T)(url);\n  }\n\n  if (typeof value !== 'undefined') {\n    return value;\n  }\n\n  if (typeof defaultValue !== 'undefined') {\n    return defaultValue;\n  }\n\n  return undefined;\n}\n\n// TODO: use @clerk/shared once it is tree-shakeable\nexport function isHttpOrHttps(key: string | undefined) {\n  return /^http(s)?:\\/\\//.test(key || '');\n}\n\nexport function isDevelopmentFromApiKey(apiKey: string): boolean {\n  return apiKey.startsWith('test_') || apiKey.startsWith('sk_test_');\n}\n\n// Auth result will be set as both a query param & header when applicable\nexport function decorateRequest(\n  req: NextRequest,\n  res: NextMiddlewareResult,\n  requestState: RequestState,\n): NextMiddlewareResult {\n  const { reason, message, status } = requestState;\n  // pass-through case, convert to next()\n  if (!res) {\n    res = NextResponse.next();\n  }\n\n  // redirect() case, return early\n  if (res.headers.get(nextConstants.Headers.NextRedirect)) {\n    return res;\n  }\n\n  let rewriteURL;\n\n  // next() case, convert to a rewrite\n  if (res.headers.get(nextConstants.Headers.NextResume) === '1') {\n    res.headers.delete(nextConstants.Headers.NextResume);\n    rewriteURL = new URL(req.url);\n  }\n\n  // rewrite() case, set auth result only if origin remains the same\n  const rewriteURLHeader = res.headers.get(nextConstants.Headers.NextRewrite);\n\n  if (rewriteURLHeader) {\n    const reqURL = new URL(req.url);\n    rewriteURL = new URL(rewriteURLHeader);\n\n    // if the origin has changed, return early\n    if (rewriteURL.origin !== reqURL.origin) {\n      return res;\n    }\n  }\n\n  if (rewriteURL) {\n    if (nextJsVersionCanOverrideRequestHeaders()) {\n      // If we detect that the host app is using a nextjs installation that reliably sets the\n      // request headers, we don't need to fall back to the searchParams strategy.\n      // In this case, we won't set them at all in order to avoid having them visible in the req.url\n      setRequestHeadersOnNextResponse(res, req, {\n        [constants.Headers.AuthStatus]: status,\n        [constants.Headers.AuthMessage]: message || '',\n        [constants.Headers.AuthReason]: reason || '',\n      });\n    } else {\n      res.headers.set(constants.Headers.AuthStatus, status);\n      res.headers.set(constants.Headers.AuthMessage, message || '');\n      res.headers.set(constants.Headers.AuthReason, reason || '');\n      rewriteURL.searchParams.set(constants.SearchParams.AuthStatus, status);\n      rewriteURL.searchParams.set(constants.Headers.AuthMessage, message || '');\n      rewriteURL.searchParams.set(constants.Headers.AuthReason, reason || '');\n    }\n    res.headers.set(nextConstants.Headers.NextRewrite, rewriteURL.href);\n  }\n\n  return res;\n}\n\nexport const apiEndpointUnauthorizedNextResponse = () => {\n  return NextResponse.json(null, { status: 401, statusText: 'Unauthorized' });\n};\n\nexport const isCrossOrigin = (from: string | URL, to: string | URL) => {\n  const fromUrl = new URL(from);\n  const toUrl = new URL(to);\n  return fromUrl.origin !== toUrl.origin;\n};\n\nexport const handleMultiDomainAndProxy = (req: NextRequest, opts: WithAuthOptions) => {\n  const requestURL = buildRequestUrl(req);\n  const relativeOrAbsoluteProxyUrl = handleValueOrFn(opts?.proxyUrl, requestURL, PROXY_URL);\n  let proxyUrl;\n  if (!!relativeOrAbsoluteProxyUrl && !isHttpOrHttps(relativeOrAbsoluteProxyUrl)) {\n    proxyUrl = new URL(relativeOrAbsoluteProxyUrl, requestURL).toString();\n  } else {\n    proxyUrl = relativeOrAbsoluteProxyUrl;\n  }\n\n  const isSatellite = handleValueOrFn(opts.isSatellite, new URL(req.url), IS_SATELLITE);\n  const domain = handleValueOrFn(opts.domain, new URL(req.url), DOMAIN);\n  const signInUrl = opts?.signInUrl || SIGN_IN_URL;\n\n  if (isSatellite && !proxyUrl && !domain) {\n    throw new Error(missingDomainAndProxy);\n  }\n\n  if (isSatellite && !isHttpOrHttps(signInUrl) && isDevelopmentFromApiKey(SECRET_KEY || API_KEY)) {\n    throw new Error(missingSignInUrlInDev);\n  }\n\n  return {\n    proxyUrl,\n    isSatellite,\n    domain,\n    signInUrl,\n  };\n};\n"],"mappings":"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","names":["nextConstants"]}