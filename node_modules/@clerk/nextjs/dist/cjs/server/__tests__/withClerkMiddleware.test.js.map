{"version":3,"sources":["../../../../src/server/__tests__/withClerkMiddleware.test.ts"],"sourcesContent":["import { expectTypeOf } from 'expect-type';\nimport type { NextMiddleware } from 'next/server';\n\nimport type { WithAuthOptions } from '../types';\nimport { withClerkMiddleware } from '../withClerkMiddleware';\n\ndescribe('withClerkMiddleware', () => {\n  describe('Type tests', () => {\n    describe('WithAuthOptions', () => {\n      it('is the options argument for withClerkMiddleware', () => {\n        () => {\n          withClerkMiddleware({} as NextMiddleware, {} as WithAuthOptions);\n        };\n      });\n\n      it('can receive the appropriate keys', () => {\n        expectTypeOf({ publishableKey: '', secretKey: '' }).toMatchTypeOf<WithAuthOptions>();\n        expectTypeOf({ frontendApi: '', secretKey: '' }).toMatchTypeOf<WithAuthOptions>();\n        expectTypeOf({ publishableKey: '', apiKey: '' }).toMatchTypeOf<WithAuthOptions>();\n        expectTypeOf({ frontendApi: '', apiKey: '' }).toMatchTypeOf<WithAuthOptions>();\n      });\n\n      describe('Multi domain', () => {\n        const defaultProps = { publishableKey: '', secretKey: '' };\n\n        it('proxyUrl (primary app)', () => {\n          expectTypeOf({ ...defaultProps, proxyUrl: 'test' }).toMatchTypeOf<WithAuthOptions>();\n        });\n\n        it('proxyUrl + isSatellite (satellite app)', () => {\n          expectTypeOf({ ...defaultProps, proxyUrl: 'test', isSatellite: true }).toMatchTypeOf<WithAuthOptions>();\n        });\n\n        it('domain + isSatellite (satellite app)', () => {\n          expectTypeOf({ ...defaultProps, domain: 'test', isSatellite: true }).toMatchTypeOf<WithAuthOptions>();\n        });\n\n        it('only domain is not allowed', () => {\n          expectTypeOf({ ...defaultProps, domain: 'test' }).not.toMatchTypeOf<WithAuthOptions>();\n        });\n\n        it('only isSatellite is not allowed', () => {\n          expectTypeOf({ ...defaultProps, isSatellite: true }).not.toMatchTypeOf<WithAuthOptions>();\n        });\n\n        it('proxyUrl + domain is not allowed', () => {\n          expectTypeOf({ ...defaultProps, proxyUrl: 'test', domain: 'test' }).not.toMatchTypeOf<WithAuthOptions>();\n        });\n\n        it('proxyUrl + domain + isSatellite is not allowed', () => {\n          expectTypeOf({\n            ...defaultProps,\n            proxyUrl: 'test',\n            domain: 'test',\n            isSatellite: true,\n          }).not.toMatchTypeOf<WithAuthOptions>();\n        });\n      });\n    });\n  });\n});\n"],"mappings":";AAAA,yBAA6B;AAI7B,iCAAoC;AAEpC,SAAS,uBAAuB,MAAM;AACpC,WAAS,cAAc,MAAM;AAC3B,aAAS,mBAAmB,MAAM;AAChC,SAAG,mDAAmD,MAAM;AAC1D,cAAM;AACJ,8DAAoB,CAAC,GAAqB,CAAC,CAAoB;AAAA,QACjE;AAAA,MACF,CAAC;AAED,SAAG,oCAAoC,MAAM;AAC3C,6CAAa,EAAE,gBAAgB,IAAI,WAAW,GAAG,CAAC,EAAE,cAA+B;AACnF,6CAAa,EAAE,aAAa,IAAI,WAAW,GAAG,CAAC,EAAE,cAA+B;AAChF,6CAAa,EAAE,gBAAgB,IAAI,QAAQ,GAAG,CAAC,EAAE,cAA+B;AAChF,6CAAa,EAAE,aAAa,IAAI,QAAQ,GAAG,CAAC,EAAE,cAA+B;AAAA,MAC/E,CAAC;AAED,eAAS,gBAAgB,MAAM;AAC7B,cAAM,eAAe,EAAE,gBAAgB,IAAI,WAAW,GAAG;AAEzD,WAAG,0BAA0B,MAAM;AACjC,+CAAa,EAAE,GAAG,cAAc,UAAU,OAAO,CAAC,EAAE,cAA+B;AAAA,QACrF,CAAC;AAED,WAAG,0CAA0C,MAAM;AACjD,+CAAa,EAAE,GAAG,cAAc,UAAU,QAAQ,aAAa,KAAK,CAAC,EAAE,cAA+B;AAAA,QACxG,CAAC;AAED,WAAG,wCAAwC,MAAM;AAC/C,+CAAa,EAAE,GAAG,cAAc,QAAQ,QAAQ,aAAa,KAAK,CAAC,EAAE,cAA+B;AAAA,QACtG,CAAC;AAED,WAAG,8BAA8B,MAAM;AACrC,+CAAa,EAAE,GAAG,cAAc,QAAQ,OAAO,CAAC,EAAE,IAAI,cAA+B;AAAA,QACvF,CAAC;AAED,WAAG,mCAAmC,MAAM;AAC1C,+CAAa,EAAE,GAAG,cAAc,aAAa,KAAK,CAAC,EAAE,IAAI,cAA+B;AAAA,QAC1F,CAAC;AAED,WAAG,oCAAoC,MAAM;AAC3C,+CAAa,EAAE,GAAG,cAAc,UAAU,QAAQ,QAAQ,OAAO,CAAC,EAAE,IAAI,cAA+B;AAAA,QACzG,CAAC;AAED,WAAG,kDAAkD,MAAM;AACzD,+CAAa;AAAA,YACX,GAAG;AAAA,YACH,UAAU;AAAA,YACV,QAAQ;AAAA,YACR,aAAa;AAAA,UACf,CAAC,EAAE,IAAI,cAA+B;AAAA,QACxC,CAAC;AAAA,MACH,CAAC;AAAA,IACH,CAAC;AAAA,EACH,CAAC;AACH,CAAC;","names":[]}