"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var getAuth_exports = {};
__export(getAuth_exports, {
  buildClerkProps: () => buildClerkProps,
  createGetAuth: () => createGetAuth,
  getAuth: () => getAuth
});
module.exports = __toCommonJS(getAuth_exports);
var import_backend = require("@clerk/backend");
var import_debugLogger = require("../utils/debugLogger");
var import_clerkClient = require("./clerkClient");
var import_errors = require("./errors");
var import_utils = require("./utils");
const createGetAuth = ({
  debugLoggerName,
  noAuthStatusMessage
}) => (0, import_debugLogger.withLogger)(debugLoggerName, (logger) => {
  return (req, opts) => {
    const debug = (0, import_utils.getHeader)(req, import_backend.constants.Headers.EnableDebug) === "true";
    if (debug) {
      logger.enable();
    }
    const authStatus = (0, import_utils.getAuthKeyFromRequest)(req, "AuthStatus");
    const authMessage = (0, import_utils.getAuthKeyFromRequest)(req, "AuthMessage");
    const authReason = (0, import_utils.getAuthKeyFromRequest)(req, "AuthReason");
    logger.debug("Headers debug", { authStatus, authMessage, authReason });
    if (!authStatus) {
      throw new Error(noAuthStatusMessage);
    }
    const options = {
      apiKey: opts?.apiKey || import_clerkClient.API_KEY,
      secretKey: opts?.secretKey || import_clerkClient.SECRET_KEY,
      apiUrl: import_clerkClient.API_URL,
      apiVersion: import_clerkClient.API_VERSION,
      authStatus,
      authMessage,
      authReason
    };
    logger.debug("Options debug", options);
    if (authStatus !== import_backend.AuthStatus.SignedIn) {
      return (0, import_backend.signedOutAuthObject)(options);
    }
    const jwt = parseJwt(req);
    logger.debug("JWT debug", jwt.raw.text);
    return (0, import_backend.signedInAuthObject)(jwt.payload, { ...options, token: jwt.raw.text });
  };
});
const getAuth = createGetAuth({
  debugLoggerName: "getAuth()",
  noAuthStatusMessage: (0, import_errors.getAuthAuthHeaderMissing)()
});
const buildClerkProps = (req, initState = {}) => {
  const authStatus = (0, import_utils.getAuthKeyFromRequest)(req, "AuthStatus");
  const authMessage = (0, import_utils.getAuthKeyFromRequest)(req, "AuthMessage");
  const authReason = (0, import_utils.getAuthKeyFromRequest)(req, "AuthReason");
  const options = {
    apiKey: import_clerkClient.API_KEY,
    secretKey: import_clerkClient.SECRET_KEY,
    apiUrl: import_clerkClient.API_URL,
    apiVersion: import_clerkClient.API_VERSION,
    authStatus,
    authMessage,
    authReason
  };
  let authObject;
  if (!authStatus || authStatus !== import_backend.AuthStatus.SignedIn) {
    authObject = (0, import_backend.signedOutAuthObject)(options);
  } else {
    const { payload, raw } = parseJwt(req);
    authObject = (0, import_backend.signedInAuthObject)(payload, { ...options, token: raw.text });
  }
  const sanitizedAuthObject = (0, import_backend.makeAuthObjectSerializable)((0, import_backend.sanitizeAuthObject)({ ...authObject, ...initState }));
  return (0, import_utils.injectSSRStateIntoObject)({}, sanitizedAuthObject);
};
const parseJwt = (req) => {
  const cookieToken = (0, import_utils.getCookie)(req, import_backend.constants.Cookies.Session);
  const headerToken = (0, import_utils.getHeader)(req, "authorization")?.replace("Bearer ", "");
  return (0, import_backend.decodeJwt)(cookieToken || headerToken || "");
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  buildClerkProps,
  createGetAuth,
  getAuth
});
//# sourceMappingURL=getAuth.js.map