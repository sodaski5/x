{"version":3,"sources":["../../../src/server/authMiddleware.test.ts"],"sourcesContent":["// There is no need to execute the complete authenticateRequest to test authMiddleware\n// This mock SHOULD exist before the import of authenticateRequest\nimport { NextURL } from 'next/dist/server/web/next-url';\nimport type { NextFetchEvent, NextRequest } from 'next/server';\nimport { NextResponse } from 'next/server';\n\nconst mockRedirectToSignIn = jest.fn().mockImplementation(() => {\n  const res = NextResponse.redirect(\n    'https://accounts.included.katydid-92.lcl.dev/sign-in?redirect_url=https%3A%2F%2Fwww.clerk.com%2Fprotected',\n  );\n  return setHeader(res, 'x-clerk-redirect-to', 'true');\n});\n\njest.mock('./redirect', () => {\n  return {\n    redirectToSignIn: mockRedirectToSignIn,\n  };\n});\n\nimport { paths, setHeader } from '../utils';\n// used to assert the mock\nimport { authenticateRequest } from './authenticateRequest';\nimport { authMiddleware, createRouteMatcher, DEFAULT_CONFIG_MATCHER, DEFAULT_IGNORED_ROUTES } from './authMiddleware';\n// used to assert the mock\nimport { clerkClient } from './clerkClient';\n\n/**\n * Disable console warnings about config matchers\n */\nconst consoleWarn = console.warn;\nglobal.console.warn = jest.fn();\nbeforeAll(() => {\n  global.console.warn = jest.fn();\n});\nafterAll(() => {\n  global.console.warn = consoleWarn;\n});\n\njest.mock('./authenticateRequest', () => {\n  const { handleInterstitialState, handleUnknownState } = jest.requireActual('./authenticateRequest');\n  return {\n    authenticateRequest: jest.fn().mockResolvedValue({\n      toAuth: () => ({}),\n    }),\n    handleInterstitialState,\n    handleUnknownState,\n  };\n});\n\n// Removing this mock will cause the authMiddleware tests to fail due to missing publishable key\n// This mock SHOULD exist before the imports\njest.mock('./clerkClient', () => {\n  const { debugRequestState } = jest.requireActual('./clerkClient');\n  return {\n    PUBLISHABLE_KEY: 'pk_test_Y2xlcmsuaW5jbHVkZWQua2F0eWRpZC05Mi5sY2wuZGV2JA',\n    SECRET_KEY: 'sk_test_xxxxxxxxxxxxxxxxxx',\n    clerkClient: {\n      localInterstitial: jest.fn().mockResolvedValue('<html>interstitial</html>'),\n    },\n    debugRequestState,\n  };\n});\n\ntype MockRequestParams = {\n  url: string;\n  appendDevBrowserCookie?: boolean;\n  method?: string;\n  headers?: any;\n};\n\nconst mockRequest = ({\n  url,\n  appendDevBrowserCookie = false,\n  method = 'GET',\n  headers = new Headers(),\n}: MockRequestParams) => {\n  return {\n    url: new URL(url, 'https://www.clerk.com').toString(),\n    nextUrl: new NextURL(url, 'https://www.clerk.com'),\n    cookies: {\n      get: () => (appendDevBrowserCookie ? { name: '__clerk_db_jwt', value: 'test_jwt' } : {}) as any,\n    },\n    method,\n    headers,\n  } as NextRequest;\n};\n\ndescribe('isPublicRoute', () => {\n  describe('should work with path patterns', function () {\n    it('matches path and all sub paths using *', () => {\n      const isPublicRoute = createRouteMatcher(['/hello(.*)']);\n      expect(isPublicRoute(mockRequest({ url: '/hello' }))).toBe(true);\n      expect(isPublicRoute(mockRequest({ url: '/hello' }))).toBe(true);\n      expect(isPublicRoute(mockRequest({ url: '/hello/test/a' }))).toBe(true);\n    });\n\n    it('matches filenames with specific extensions', () => {\n      const isPublicRoute = createRouteMatcher(['/(.*).ts', '/(.*).js']);\n      expect(isPublicRoute(mockRequest({ url: '/hello.js' }))).toBe(true);\n      expect(isPublicRoute(mockRequest({ url: '/test/hello.js' }))).toBe(true);\n      expect(isPublicRoute(mockRequest({ url: '/test/hello.ts' }))).toBe(true);\n    });\n\n    it('works with single values (non array)', () => {\n      const isPublicRoute = createRouteMatcher('/test/hello.ts');\n      expect(isPublicRoute(mockRequest({ url: '/hello.js' }))).not.toBe(true);\n      expect(isPublicRoute(mockRequest({ url: '/test/hello.js' }))).not.toBe(true);\n    });\n  });\n\n  describe('should work with regex patterns', function () {\n    it('matches path and all sub paths using *', () => {\n      const isPublicRoute = createRouteMatcher([/^\\/hello.*$/]);\n      expect(isPublicRoute(mockRequest({ url: '/hello' }))).toBe(true);\n      expect(isPublicRoute(mockRequest({ url: '/hello/' }))).toBe(true);\n      expect(isPublicRoute(mockRequest({ url: '/hello/test/a' }))).toBe(true);\n    });\n\n    it('matches filenames with specific extensions', () => {\n      const isPublicRoute = createRouteMatcher([/^.*\\.(ts|js)$/]);\n      expect(isPublicRoute(mockRequest({ url: '/hello.js' }))).toBe(true);\n      expect(isPublicRoute(mockRequest({ url: '/test/hello.js' }))).toBe(true);\n      expect(isPublicRoute(mockRequest({ url: '/test/hello.ts' }))).toBe(true);\n    });\n\n    it('works with single values (non array)', () => {\n      const isPublicRoute = createRouteMatcher(/hello/g);\n      expect(isPublicRoute(mockRequest({ url: '/hello.js' }))).toBe(true);\n      expect(isPublicRoute(mockRequest({ url: '/test/hello.js' }))).toBe(true);\n    });\n  });\n});\n\nconst validRoutes = [\n  '/api',\n  '/api/',\n  '/api/hello',\n  '/trpc',\n  '/trpc/hello',\n  '/trpc/hello.example',\n  '/protected',\n  '/protected/',\n  '/protected/hello',\n];\n\nconst invalidRoutes = ['/_next', '/favicon.ico', '/_next/test.json', '/files/api.pdf', '/test/api/test.pdf'];\n\ndescribe('default config matcher', () => {\n  it('compiles to regex using path-to-regex', () => {\n    [DEFAULT_CONFIG_MATCHER].flat().forEach(path => {\n      expect(paths.toRegexp(path)).toBeInstanceOf(RegExp);\n    });\n  });\n\n  describe('does not match any static files or next internals', function () {\n    it.each(invalidRoutes)(`does not match %s`, path => {\n      const matcher = createRouteMatcher(DEFAULT_CONFIG_MATCHER);\n      expect(matcher(mockRequest({ url: path }))).toBe(false);\n    });\n  });\n\n  describe('matches /api or known framework routes', function () {\n    it.each(validRoutes)(`matches %s`, path => {\n      const matcher = createRouteMatcher(DEFAULT_CONFIG_MATCHER);\n      expect(matcher(mockRequest({ url: path }))).toBe(true);\n    });\n  });\n});\n\ndescribe('default ignored routes matcher', () => {\n  it('compiles to regex using path-to-regex', () => {\n    [DEFAULT_IGNORED_ROUTES].flat().forEach(path => {\n      expect(paths.toRegexp(path)).toBeInstanceOf(RegExp);\n    });\n  });\n\n  describe('matches all static files or next internals', function () {\n    it.each(invalidRoutes)(`matches %s`, path => {\n      const matcher = createRouteMatcher(DEFAULT_IGNORED_ROUTES);\n      expect(matcher(mockRequest({ url: path }))).toBe(true);\n    });\n  });\n\n  describe('does not match /api or known framework routes', function () {\n    it.each(validRoutes)(`does not match %s`, path => {\n      const matcher = createRouteMatcher(DEFAULT_IGNORED_ROUTES);\n      expect(matcher(mockRequest({ url: path }))).toBe(false);\n    });\n  });\n});\n\ndescribe('authMiddleware(params)', () => {\n  beforeEach(() => {\n    // @ts-ignore\n    authenticateRequest.mockClear();\n    // @ts-ignore\n    clerkClient.localInterstitial.mockClear();\n  });\n\n  describe('without params', function () {\n    it('redirects to sign-in for protected route', async () => {\n      const resp = await authMiddleware()(mockRequest({ url: '/protected' }), {} as NextFetchEvent);\n\n      expect(resp?.status).toEqual(307);\n      expect(resp?.headers.get('location')).toEqual(\n        'https://accounts.included.katydid-92.lcl.dev/sign-in?redirect_url=https%3A%2F%2Fwww.clerk.com%2Fprotected',\n      );\n    });\n\n    it('renders public route', async () => {\n      const signInResp = await authMiddleware({ publicRoutes: '/sign-in' })(\n        mockRequest({ url: '/sign-in' }),\n        {} as NextFetchEvent,\n      );\n      expect(signInResp?.status).toEqual(200);\n      expect(signInResp?.headers.get('x-middleware-rewrite')).toEqual('https://www.clerk.com/sign-in');\n\n      const signUpResp = await authMiddleware({ publicRoutes: ['/sign-up'] })(\n        mockRequest({ url: '/sign-up' }),\n        {} as NextFetchEvent,\n      );\n      expect(signUpResp?.status).toEqual(200);\n      expect(signUpResp?.headers.get('x-middleware-rewrite')).toEqual('https://www.clerk.com/sign-up');\n    });\n  });\n\n  describe('with ignoredRoutes', function () {\n    it('skips auth middleware execution', async () => {\n      const beforeAuthSpy = jest.fn();\n      const afterAuthSpy = jest.fn();\n      const resp = await authMiddleware({\n        ignoredRoutes: '/ignored',\n        beforeAuth: beforeAuthSpy,\n        afterAuth: afterAuthSpy,\n      })(mockRequest({ url: '/ignored' }), {} as NextFetchEvent);\n\n      expect(resp?.status).toEqual(200);\n      expect(authenticateRequest).not.toBeCalled();\n      expect(beforeAuthSpy).not.toBeCalled();\n      expect(afterAuthSpy).not.toBeCalled();\n    });\n\n    it('executes auth middleware execution when is not matched', async () => {\n      const beforeAuthSpy = jest.fn();\n      const afterAuthSpy = jest.fn();\n      const resp = await authMiddleware({\n        ignoredRoutes: '/ignored',\n        beforeAuth: beforeAuthSpy,\n        afterAuth: afterAuthSpy,\n      })(mockRequest({ url: '/protected' }), {} as NextFetchEvent);\n\n      expect(resp?.status).toEqual(200);\n      expect(authenticateRequest).toBeCalled();\n      expect(beforeAuthSpy).toBeCalled();\n      expect(afterAuthSpy).toBeCalled();\n    });\n  });\n\n  describe('with publicRoutes', function () {\n    it('renders public route', async () => {\n      const resp = await authMiddleware({\n        publicRoutes: '/public',\n      })(mockRequest({ url: '/public' }), {} as NextFetchEvent);\n\n      expect(resp?.status).toEqual(200);\n      expect(resp?.headers.get('x-middleware-rewrite')).toEqual('https://www.clerk.com/public');\n    });\n\n    describe('when sign-in/sign-up routes are defined in env', () => {\n      const currentSignInUrl = process.env.NEXT_PUBLIC_CLERK_SIGN_IN_URL;\n      const currentSignUpUrl = process.env.NEXT_PUBLIC_CLERK_SIGN_UP_URL;\n\n      beforeEach(() => {\n        process.env.NEXT_PUBLIC_CLERK_SIGN_IN_URL = '/custom-sign-in';\n        process.env.NEXT_PUBLIC_CLERK_SIGN_UP_URL = '/custom-sign-up';\n      });\n\n      afterEach(() => {\n        process.env.NEXT_PUBLIC_CLERK_SIGN_IN_URL = currentSignInUrl;\n        process.env.NEXT_PUBLIC_CLERK_SIGN_UP_URL = currentSignUpUrl;\n      });\n\n      it('renders sign-in/sign-up routes', async () => {\n        const signInResp = await authMiddleware({\n          publicRoutes: '/public',\n        })(mockRequest({ url: '/custom-sign-in' }), {} as NextFetchEvent);\n        expect(signInResp?.status).toEqual(200);\n        expect(signInResp?.headers.get('x-middleware-rewrite')).toEqual('https://www.clerk.com/custom-sign-in');\n\n        const signUpResp = await authMiddleware({\n          publicRoutes: '/public',\n        })(mockRequest({ url: '/custom-sign-up' }), {} as NextFetchEvent);\n        expect(signUpResp?.status).toEqual(200);\n        expect(signUpResp?.headers.get('x-middleware-rewrite')).toEqual('https://www.clerk.com/custom-sign-up');\n      });\n    });\n\n    it('redirects to sign-in for protected route', async () => {\n      const resp = await authMiddleware({\n        publicRoutes: '/public',\n      })(mockRequest({ url: '/protected' }), {} as NextFetchEvent);\n\n      expect(resp?.status).toEqual(307);\n      expect(resp?.headers.get('location')).toEqual(\n        'https://accounts.included.katydid-92.lcl.dev/sign-in?redirect_url=https%3A%2F%2Fwww.clerk.com%2Fprotected',\n      );\n    });\n  });\n\n  describe('with beforeAuth', function () {\n    it('skips auth middleware execution when beforeAuth returns false', async () => {\n      const afterAuthSpy = jest.fn();\n      const resp = await authMiddleware({\n        beforeAuth: () => false,\n        afterAuth: afterAuthSpy,\n      })(mockRequest({ url: '/protected' }), {} as NextFetchEvent);\n\n      expect(resp?.status).toEqual(200);\n      expect(resp?.headers.get('x-clerk-auth-reason')).toEqual('skip');\n      expect(authenticateRequest).not.toBeCalled();\n      expect(afterAuthSpy).not.toBeCalled();\n    });\n\n    it('executes auth middleware execution when beforeAuth returns undefined', async () => {\n      const afterAuthSpy = jest.fn();\n      const resp = await authMiddleware({\n        beforeAuth: () => undefined,\n        afterAuth: afterAuthSpy,\n      })(mockRequest({ url: '/protected' }), {} as NextFetchEvent);\n\n      expect(resp?.status).toEqual(200);\n      expect(authenticateRequest).toBeCalled();\n      expect(afterAuthSpy).toBeCalled();\n    });\n\n    it('skips auth middleware execution when beforeAuth returns NextResponse.redirect', async () => {\n      const afterAuthSpy = jest.fn();\n      const resp = await authMiddleware({\n        beforeAuth: () => NextResponse.redirect('https://www.clerk.com/custom-redirect'),\n        afterAuth: afterAuthSpy,\n      })(mockRequest({ url: '/protected' }), {} as NextFetchEvent);\n\n      expect(resp?.status).toEqual(307);\n      expect(resp?.headers.get('location')).toEqual('https://www.clerk.com/custom-redirect');\n      expect(resp?.headers.get('x-clerk-auth-reason')).toEqual('redirect');\n      expect(authenticateRequest).not.toBeCalled();\n      expect(afterAuthSpy).not.toBeCalled();\n    });\n\n    it('executes auth middleware when beforeAuth returns NextResponse', async () => {\n      const resp = await authMiddleware({\n        beforeAuth: () =>\n          NextResponse.next({\n            headers: {\n              'x-before-auth-header': 'before',\n            },\n          }),\n        afterAuth: () =>\n          NextResponse.next({\n            headers: {\n              'x-after-auth-header': 'after',\n            },\n          }),\n      })(mockRequest({ url: '/protected' }), {} as NextFetchEvent);\n\n      expect(resp?.status).toEqual(200);\n      expect(resp?.headers.get('x-before-auth-header')).toEqual('before');\n      expect(resp?.headers.get('x-after-auth-header')).toEqual('after');\n      expect(authenticateRequest).toBeCalled();\n    });\n  });\n\n  describe('with afterAuth', function () {\n    it('redirects to sign-in for protected route and sets redirect as auth reason header', async () => {\n      const resp = await authMiddleware({\n        beforeAuth: () => NextResponse.next(),\n      })(mockRequest({ url: '/protected' }), {} as NextFetchEvent);\n\n      expect(resp?.status).toEqual(307);\n      expect(resp?.headers.get('location')).toEqual(\n        'https://accounts.included.katydid-92.lcl.dev/sign-in?redirect_url=https%3A%2F%2Fwww.clerk.com%2Fprotected',\n      );\n      expect(resp?.headers.get('x-clerk-auth-reason')).toEqual('redirect');\n      expect(authenticateRequest).toBeCalled();\n    });\n\n    it('uses authenticateRequest result as auth', async () => {\n      const req = mockRequest({ url: '/protected' });\n      const event = {} as NextFetchEvent;\n      // @ts-ignore\n      authenticateRequest.mockResolvedValueOnce({ toAuth: () => ({ userId: null }) });\n      const afterAuthSpy = jest.fn();\n\n      await authMiddleware({ afterAuth: afterAuthSpy })(req, event);\n\n      expect(authenticateRequest).toBeCalled();\n      expect(afterAuthSpy).toBeCalledWith(\n        {\n          userId: null,\n          isPublicRoute: false,\n          isApiRoute: false,\n        },\n        req,\n        event,\n      );\n    });\n  });\n\n  describe('authenticateRequest', function () {\n    it('returns 401 with local interstitial for interstitial requestState', async () => {\n      // @ts-ignore\n      authenticateRequest.mockResolvedValueOnce({ isInterstitial: true });\n      const resp = await authMiddleware()(mockRequest({ url: '/protected' }), {} as NextFetchEvent);\n\n      expect(resp?.status).toEqual(401);\n      expect(resp?.headers.get('content-type')).toEqual('text/html');\n      expect(clerkClient.localInterstitial).toBeCalled();\n    });\n\n    it('returns 401 for unknown requestState', async () => {\n      // @ts-ignore\n      authenticateRequest.mockResolvedValueOnce({ isUnknown: true });\n      const resp = await authMiddleware()(mockRequest({ url: '/protected' }), {} as NextFetchEvent);\n\n      expect(resp?.status).toEqual(401);\n      expect(resp?.headers.get('content-type')).toEqual('application/json');\n      expect(clerkClient.localInterstitial).not.toBeCalled();\n    });\n\n    it('returns 401 for interstitial requestState in an API route', async () => {\n      // @ts-ignore\n      authenticateRequest.mockResolvedValueOnce({ isInterstitial: true });\n      const resp = await authMiddleware({ apiRoutes: ['/api/items'] })(\n        mockRequest({ url: '/api/items' }),\n        {} as NextFetchEvent,\n      );\n\n      expect(resp?.status).toEqual(401);\n      expect(resp?.headers.get('content-type')).toEqual('application/json');\n      expect(clerkClient.localInterstitial).not.toBeCalled();\n    });\n  });\n});\n\ndescribe('Dev Browser JWT when redirecting to cross origin', function () {\n  it('does NOT append the Dev Browser JWT when cookie is missing', async () => {\n    const resp = await authMiddleware({\n      beforeAuth: () => NextResponse.next(),\n    })(mockRequest({ url: '/protected', appendDevBrowserCookie: false }), {} as NextFetchEvent);\n\n    expect(resp?.status).toEqual(307);\n    expect(resp?.headers.get('location')).toEqual(\n      'https://accounts.included.katydid-92.lcl.dev/sign-in?redirect_url=https%3A%2F%2Fwww.clerk.com%2Fprotected',\n    );\n    expect(resp?.headers.get('x-clerk-auth-reason')).toEqual('redirect');\n    expect(authenticateRequest).toBeCalled();\n  });\n\n  it('appends the Dev Browser JWT on the URL when cookie __clerk_db_jwt exists', async () => {\n    const resp = await authMiddleware({\n      beforeAuth: () => NextResponse.next(),\n    })(mockRequest({ url: '/protected', appendDevBrowserCookie: true }), {} as NextFetchEvent);\n\n    expect(resp?.status).toEqual(307);\n    expect(resp?.headers.get('location')).toEqual(\n      'https://accounts.included.katydid-92.lcl.dev/sign-in?redirect_url=https%3A%2F%2Fwww.clerk.com%2Fprotected#__clerk_db_jwt[test_jwt]',\n    );\n    expect(resp?.headers.get('x-clerk-auth-reason')).toEqual('redirect');\n    expect(authenticateRequest).toBeCalled();\n  });\n\n  it('does NOT append the Dev Browser JWT if x-clerk-redirect-to header is not set', async () => {\n    mockRedirectToSignIn.mockReturnValueOnce(\n      NextResponse.redirect(\n        'https://accounts.included.katydid-92.lcl.dev/sign-in?redirect_url=https%3A%2F%2Fwww.clerk.com%2Fprotected',\n      ),\n    );\n    const resp = await authMiddleware({\n      beforeAuth: () => NextResponse.next(),\n    })(mockRequest({ url: '/protected', appendDevBrowserCookie: true }), {} as NextFetchEvent);\n\n    expect(resp?.status).toEqual(307);\n    expect(resp?.headers.get('location')).toEqual(\n      'https://accounts.included.katydid-92.lcl.dev/sign-in?redirect_url=https%3A%2F%2Fwww.clerk.com%2Fprotected',\n    );\n    expect(resp?.headers.get('x-clerk-auth-reason')).toEqual('redirect');\n    expect(authenticateRequest).toBeCalled();\n  });\n});\n\ndescribe('isApiRoute', function () {\n  it('treats route as API route if apiRoutes match the route path', async () => {\n    const resp = await authMiddleware({\n      beforeAuth: () => NextResponse.next(),\n      publicRoutes: ['/public'],\n      apiRoutes: ['/api/(.*)'],\n    })(mockRequest({ url: '/api/items' }), {} as NextFetchEvent);\n\n    expect(resp?.status).toEqual(401);\n    expect(resp?.headers.get('content-type')).toEqual('application/json');\n  });\n\n  it('treats route as Page route if apiRoutes do not match the route path', async () => {\n    const resp = await authMiddleware({\n      beforeAuth: () => NextResponse.next(),\n      publicRoutes: ['/public'],\n      apiRoutes: ['/api/(.*)'],\n    })(mockRequest({ url: '/page' }), {} as NextFetchEvent);\n\n    expect(resp?.status).toEqual(307);\n  });\n\n  it('treats route as API route if apiRoutes prop is missing and route path matches the default matcher (/api/(.*))', async () => {\n    const resp = await authMiddleware({\n      beforeAuth: () => NextResponse.next(),\n      publicRoutes: ['/public'],\n    })(mockRequest({ url: '/api/items' }), {} as NextFetchEvent);\n\n    expect(resp?.status).toEqual(401);\n    expect(resp?.headers.get('content-type')).toEqual('application/json');\n  });\n\n  it('treats route as API route if apiRoutes prop is missing and route path matches the default matcher (/trpc/(.*))', async () => {\n    const resp = await authMiddleware({\n      beforeAuth: () => NextResponse.next(),\n      publicRoutes: ['/public'],\n    })(mockRequest({ url: '/trpc/items' }), {} as NextFetchEvent);\n\n    expect(resp?.status).toEqual(401);\n    expect(resp?.headers.get('content-type')).toEqual('application/json');\n  });\n\n  it('treats route as API route if apiRoutes prop is missing and Request method is not-GET,OPTIONS,HEAD', async () => {\n    const resp = await authMiddleware({\n      beforeAuth: () => NextResponse.next(),\n      publicRoutes: ['/public'],\n    })(mockRequest({ url: '/products/items', method: 'POST' }), {} as NextFetchEvent);\n\n    expect(resp?.status).toEqual(401);\n    expect(resp?.headers.get('content-type')).toEqual('application/json');\n  });\n\n  it('treats route as API route if apiRoutes prop is missing and Request headers Content-Type is application/json', async () => {\n    const resp = await authMiddleware({\n      beforeAuth: () => NextResponse.next(),\n      publicRoutes: ['/public'],\n    })(\n      mockRequest({ url: '/products/items', headers: new Headers({ 'content-type': 'application/json' }) }),\n      {} as NextFetchEvent,\n    );\n\n    expect(resp?.status).toEqual(401);\n    expect(resp?.headers.get('content-type')).toEqual('application/json');\n  });\n});\n\ndescribe('401 Response on Api Routes', function () {\n  it('returns 401 when route is not public and route matches API routes', async () => {\n    const resp = await authMiddleware({\n      beforeAuth: () => NextResponse.next(),\n      publicRoutes: ['/public'],\n      apiRoutes: ['/products/(.*)'],\n    })(mockRequest({ url: '/products/items' }), {} as NextFetchEvent);\n\n    expect(resp?.status).toEqual(401);\n    expect(resp?.headers.get('content-type')).toEqual('application/json');\n  });\n\n  it('returns 307 when route is not public and route does not match API routes', async () => {\n    const resp = await authMiddleware({\n      beforeAuth: () => NextResponse.next(),\n      publicRoutes: ['/public'],\n      apiRoutes: ['/products/(.*)'],\n    })(mockRequest({ url: '/api/items' }), {} as NextFetchEvent);\n\n    expect(resp?.status).toEqual(307);\n    expect(resp?.headers.get('content-type')).not.toEqual('application/json');\n  });\n\n  it('returns 200 when API route is public', async () => {\n    const resp = await authMiddleware({\n      beforeAuth: () => NextResponse.next(),\n      publicRoutes: ['/public'],\n      apiRoutes: ['/public'],\n    })(mockRequest({ url: '/public' }), {} as NextFetchEvent);\n\n    expect(resp?.status).toEqual(200);\n  });\n});\n"],"mappings":"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","names":[]}