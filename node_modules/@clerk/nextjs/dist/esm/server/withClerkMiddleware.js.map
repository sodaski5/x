{"version":3,"sources":["../../../src/server/withClerkMiddleware.ts"],"sourcesContent":["import type { RequestState } from '@clerk/backend';\nimport { constants, debugRequestState } from '@clerk/backend';\nimport type { NextMiddleware } from 'next/dist/server/web/types';\nimport type { NextFetchEvent, NextRequest } from 'next/server';\nimport { NextResponse } from 'next/server';\n\nimport {\n  API_KEY,\n  API_URL,\n  CLERK_JS_URL,\n  CLERK_JS_VERSION,\n  clerkClient,\n  FRONTEND_API,\n  PUBLISHABLE_KEY,\n  SECRET_KEY,\n} from './clerkClient';\nimport type { WithAuthOptions } from './types';\nimport { decorateRequest, handleMultiDomainAndProxy, setCustomAttributeOnRequest } from './utils';\n\nexport interface WithClerkMiddleware {\n  (handler: NextMiddleware, opts?: WithAuthOptions): NextMiddleware;\n\n  (): NextMiddleware;\n}\n\nexport const decorateResponseWithObservabilityHeaders = (res: NextResponse, requestState: RequestState) => {\n  requestState.message && res.headers.set(constants.Headers.AuthMessage, encodeURIComponent(requestState.message));\n  requestState.reason && res.headers.set(constants.Headers.AuthReason, encodeURIComponent(requestState.reason));\n  requestState.status && res.headers.set(constants.Headers.AuthStatus, encodeURIComponent(requestState.status));\n};\n\n/**\n * @deprecated withClerkMiddleware has been deprecated in favor of `authMiddleware`.\n * For more details, consult the middleware documentation: https://clerk.com/docs/nextjs/middleware\n */\nexport const withClerkMiddleware: WithClerkMiddleware = (...args: unknown[]) => {\n  const noop = () => undefined;\n  const [handler = noop, opts = {}] = args as [NextMiddleware, WithAuthOptions] | [];\n\n  return async (req: NextRequest, event: NextFetchEvent) => {\n    const { isSatellite, domain, signInUrl, proxyUrl } = handleMultiDomainAndProxy(req, opts);\n\n    // get auth state, check if we need to return an interstitial\n    const requestState = await clerkClient.authenticateRequest({\n      ...opts,\n      apiKey: opts.apiKey || API_KEY,\n      secretKey: opts.secretKey || SECRET_KEY,\n      frontendApi: opts.frontendApi || FRONTEND_API,\n      publishableKey: opts.publishableKey || PUBLISHABLE_KEY,\n      isSatellite,\n      domain,\n      signInUrl,\n      proxyUrl,\n      request: req,\n    });\n\n    // Interstitial case\n    // Note: there is currently no way to rewrite to a protected endpoint\n    // Therefore we have to resort to a public interstitial endpoint\n    if (requestState.isUnknown) {\n      const response = new NextResponse(null, { status: 401, headers: { 'Content-Type': 'text/html' } });\n      decorateResponseWithObservabilityHeaders(response, requestState);\n      return response;\n    }\n    if (requestState.isInterstitial) {\n      const response = NextResponse.rewrite(\n        clerkClient.remotePublicInterstitialUrl({\n          apiUrl: API_URL,\n          frontendApi: opts.frontendApi || FRONTEND_API,\n          publishableKey: opts.publishableKey || PUBLISHABLE_KEY,\n          clerkJSUrl: CLERK_JS_URL,\n          clerkJSVersion: CLERK_JS_VERSION,\n          proxyUrl: requestState.proxyUrl as any,\n          isSatellite: requestState.isSatellite,\n          domain: requestState.domain as any,\n          debugData: debugRequestState(requestState),\n          signInUrl: requestState.signInUrl,\n        }),\n        { status: 401 },\n      );\n      decorateResponseWithObservabilityHeaders(response, requestState);\n      return response;\n    }\n\n    // Set auth result on request in a private property so that middleware can read it too\n    setCustomAttributeOnRequest(req, constants.Attributes.AuthStatus, requestState.status);\n    setCustomAttributeOnRequest(req, constants.Attributes.AuthMessage, requestState.message || '');\n    setCustomAttributeOnRequest(req, constants.Attributes.AuthReason, requestState.reason || '');\n\n    // get result from provided handler\n    const res = await handler(req, event);\n    return decorateRequest(req, res, requestState);\n  };\n};\n"],"mappings":"AACA,SAAS,WAAW,yBAAyB;AAG7C,SAAS,oBAAoB;AAE7B;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AAEP,SAAS,iBAAiB,2BAA2B,mCAAmC;AAQjF,MAAM,2CAA2C,CAAC,KAAmB,iBAA+B;AACzG,eAAa,WAAW,IAAI,QAAQ,IAAI,UAAU,QAAQ,aAAa,mBAAmB,aAAa,OAAO,CAAC;AAC/G,eAAa,UAAU,IAAI,QAAQ,IAAI,UAAU,QAAQ,YAAY,mBAAmB,aAAa,MAAM,CAAC;AAC5G,eAAa,UAAU,IAAI,QAAQ,IAAI,UAAU,QAAQ,YAAY,mBAAmB,aAAa,MAAM,CAAC;AAC9G;AAMO,MAAM,sBAA2C,IAAI,SAAoB;AAC9E,QAAM,OAAO,MAAM;AACnB,QAAM,CAAC,UAAU,MAAM,OAAO,CAAC,CAAC,IAAI;AAEpC,SAAO,OAAO,KAAkB,UAA0B;AACxD,UAAM,EAAE,aAAa,QAAQ,WAAW,SAAS,IAAI,0BAA0B,KAAK,IAAI;AAGxF,UAAM,eAAe,MAAM,YAAY,oBAAoB;AAAA,MACzD,GAAG;AAAA,MACH,QAAQ,KAAK,UAAU;AAAA,MACvB,WAAW,KAAK,aAAa;AAAA,MAC7B,aAAa,KAAK,eAAe;AAAA,MACjC,gBAAgB,KAAK,kBAAkB;AAAA,MACvC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,SAAS;AAAA,IACX,CAAC;AAKD,QAAI,aAAa,WAAW;AAC1B,YAAM,WAAW,IAAI,aAAa,MAAM,EAAE,QAAQ,KAAK,SAAS,EAAE,gBAAgB,YAAY,EAAE,CAAC;AACjG,+CAAyC,UAAU,YAAY;AAC/D,aAAO;AAAA,IACT;AACA,QAAI,aAAa,gBAAgB;AAC/B,YAAM,WAAW,aAAa;AAAA,QAC5B,YAAY,4BAA4B;AAAA,UACtC,QAAQ;AAAA,UACR,aAAa,KAAK,eAAe;AAAA,UACjC,gBAAgB,KAAK,kBAAkB;AAAA,UACvC,YAAY;AAAA,UACZ,gBAAgB;AAAA,UAChB,UAAU,aAAa;AAAA,UACvB,aAAa,aAAa;AAAA,UAC1B,QAAQ,aAAa;AAAA,UACrB,WAAW,kBAAkB,YAAY;AAAA,UACzC,WAAW,aAAa;AAAA,QAC1B,CAAC;AAAA,QACD,EAAE,QAAQ,IAAI;AAAA,MAChB;AACA,+CAAyC,UAAU,YAAY;AAC/D,aAAO;AAAA,IACT;AAGA,gCAA4B,KAAK,UAAU,WAAW,YAAY,aAAa,MAAM;AACrF,gCAA4B,KAAK,UAAU,WAAW,aAAa,aAAa,WAAW,EAAE;AAC7F,gCAA4B,KAAK,UAAU,WAAW,YAAY,aAAa,UAAU,EAAE;AAG3F,UAAM,MAAM,MAAM,QAAQ,KAAK,KAAK;AACpC,WAAO,gBAAgB,KAAK,KAAK,YAAY;AAAA,EAC/C;AACF;","names":[]}