{"version":3,"sources":["../../../src/server/getAuth.ts"],"sourcesContent":["import type { Organization, Session, SignedInAuthObject, SignedOutAuthObject, User } from '@clerk/backend';\nimport {\n  AuthStatus,\n  constants,\n  decodeJwt,\n  makeAuthObjectSerializable,\n  sanitizeAuthObject,\n  signedInAuthObject,\n  signedOutAuthObject,\n} from '@clerk/backend';\nimport type { SecretKeyOrApiKey } from '@clerk/types';\n\nimport { withLogger } from '../utils/debugLogger';\nimport { API_KEY, API_URL, API_VERSION, SECRET_KEY } from './clerkClient';\nimport { getAuthAuthHeaderMissing } from './errors';\nimport type { RequestLike } from './types';\nimport { getAuthKeyFromRequest, getCookie, getHeader, injectSSRStateIntoObject } from './utils';\n\ntype GetAuthOpts = Partial<SecretKeyOrApiKey>;\n\nexport const createGetAuth = ({\n  debugLoggerName,\n  noAuthStatusMessage,\n}: {\n  noAuthStatusMessage: string;\n  debugLoggerName: string;\n}) =>\n  withLogger(debugLoggerName, logger => {\n    return (req: RequestLike, opts?: GetAuthOpts): SignedInAuthObject | SignedOutAuthObject => {\n      const debug = getHeader(req, constants.Headers.EnableDebug) === 'true';\n      if (debug) {\n        logger.enable();\n      }\n\n      // When the auth status is set, we trust that the middleware has already run\n      // Then, we don't have to re-verify the JWT here,\n      // we can just strip out the claims manually.\n      const authStatus = getAuthKeyFromRequest(req, 'AuthStatus');\n      const authMessage = getAuthKeyFromRequest(req, 'AuthMessage');\n      const authReason = getAuthKeyFromRequest(req, 'AuthReason');\n      logger.debug('Headers debug', { authStatus, authMessage, authReason });\n\n      if (!authStatus) {\n        throw new Error(noAuthStatusMessage);\n      }\n\n      const options = {\n        apiKey: opts?.apiKey || API_KEY,\n        secretKey: opts?.secretKey || SECRET_KEY,\n        apiUrl: API_URL,\n        apiVersion: API_VERSION,\n        authStatus,\n        authMessage,\n        authReason,\n      };\n      logger.debug('Options debug', options);\n\n      if (authStatus !== AuthStatus.SignedIn) {\n        return signedOutAuthObject(options);\n      }\n\n      const jwt = parseJwt(req);\n      logger.debug('JWT debug', jwt.raw.text);\n      return signedInAuthObject(jwt.payload, { ...options, token: jwt.raw.text });\n    };\n  });\n\nexport const getAuth = createGetAuth({\n  debugLoggerName: 'getAuth()',\n  noAuthStatusMessage: getAuthAuthHeaderMissing(),\n});\n\ntype BuildClerkPropsInitState = { user?: User | null; session?: Session | null; organization?: Organization | null };\n\n/**\n * To enable Clerk SSR support, include this object to the `props`\n * returned from `getServerSideProps`. This will automatically make the auth state available to\n * the Clerk components and hooks during SSR, the hydration phase and CSR.\n * @example\n * import { getAuth } from '@clerk/nextjs/server';\n *\n * export const getServerSideProps = ({ req }) => {\n *   const { authServerSideProps } = getAuth(req);\n *   const myData = getMyData();\n *\n *   return {\n *     props: { myData, authServerSideProps },\n *   };\n * };\n */\ntype BuildClerkProps = (req: RequestLike, authState?: BuildClerkPropsInitState) => Record<string, unknown>;\n\nexport const buildClerkProps: BuildClerkProps = (req, initState = {}) => {\n  const authStatus = getAuthKeyFromRequest(req, 'AuthStatus');\n  const authMessage = getAuthKeyFromRequest(req, 'AuthMessage');\n  const authReason = getAuthKeyFromRequest(req, 'AuthReason');\n\n  const options = {\n    apiKey: API_KEY,\n    secretKey: SECRET_KEY,\n    apiUrl: API_URL,\n    apiVersion: API_VERSION,\n    authStatus,\n    authMessage,\n    authReason,\n  };\n\n  let authObject;\n  if (!authStatus || authStatus !== AuthStatus.SignedIn) {\n    authObject = signedOutAuthObject(options);\n  } else {\n    const { payload, raw } = parseJwt(req);\n    authObject = signedInAuthObject(payload, { ...options, token: raw.text });\n  }\n\n  const sanitizedAuthObject = makeAuthObjectSerializable(sanitizeAuthObject({ ...authObject, ...initState }));\n  return injectSSRStateIntoObject({}, sanitizedAuthObject);\n};\n\nconst parseJwt = (req: RequestLike) => {\n  const cookieToken = getCookie(req, constants.Cookies.Session);\n  const headerToken = getHeader(req, 'authorization')?.replace('Bearer ', '');\n  return decodeJwt(cookieToken || headerToken || '');\n};\n"],"mappings":"AACA;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AAGP,SAAS,kBAAkB;AAC3B,SAAS,SAAS,SAAS,aAAa,kBAAkB;AAC1D,SAAS,gCAAgC;AAEzC,SAAS,uBAAuB,WAAW,WAAW,gCAAgC;AAI/E,MAAM,gBAAgB,CAAC;AAAA,EAC5B;AAAA,EACA;AACF,MAIE,WAAW,iBAAiB,YAAU;AACpC,SAAO,CAAC,KAAkB,SAAiE;AACzF,UAAM,QAAQ,UAAU,KAAK,UAAU,QAAQ,WAAW,MAAM;AAChE,QAAI,OAAO;AACT,aAAO,OAAO;AAAA,IAChB;AAKA,UAAM,aAAa,sBAAsB,KAAK,YAAY;AAC1D,UAAM,cAAc,sBAAsB,KAAK,aAAa;AAC5D,UAAM,aAAa,sBAAsB,KAAK,YAAY;AAC1D,WAAO,MAAM,iBAAiB,EAAE,YAAY,aAAa,WAAW,CAAC;AAErE,QAAI,CAAC,YAAY;AACf,YAAM,IAAI,MAAM,mBAAmB;AAAA,IACrC;AAEA,UAAM,UAAU;AAAA,MACd,QAAQ,MAAM,UAAU;AAAA,MACxB,WAAW,MAAM,aAAa;AAAA,MAC9B,QAAQ;AAAA,MACR,YAAY;AAAA,MACZ;AAAA,MACA;AAAA,MACA;AAAA,IACF;AACA,WAAO,MAAM,iBAAiB,OAAO;AAErC,QAAI,eAAe,WAAW,UAAU;AACtC,aAAO,oBAAoB,OAAO;AAAA,IACpC;AAEA,UAAM,MAAM,SAAS,GAAG;AACxB,WAAO,MAAM,aAAa,IAAI,IAAI,IAAI;AACtC,WAAO,mBAAmB,IAAI,SAAS,EAAE,GAAG,SAAS,OAAO,IAAI,IAAI,KAAK,CAAC;AAAA,EAC5E;AACF,CAAC;AAEI,MAAM,UAAU,cAAc;AAAA,EACnC,iBAAiB;AAAA,EACjB,qBAAqB,yBAAyB;AAChD,CAAC;AAsBM,MAAM,kBAAmC,CAAC,KAAK,YAAY,CAAC,MAAM;AACvE,QAAM,aAAa,sBAAsB,KAAK,YAAY;AAC1D,QAAM,cAAc,sBAAsB,KAAK,aAAa;AAC5D,QAAM,aAAa,sBAAsB,KAAK,YAAY;AAE1D,QAAM,UAAU;AAAA,IACd,QAAQ;AAAA,IACR,WAAW;AAAA,IACX,QAAQ;AAAA,IACR,YAAY;AAAA,IACZ;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,MAAI;AACJ,MAAI,CAAC,cAAc,eAAe,WAAW,UAAU;AACrD,iBAAa,oBAAoB,OAAO;AAAA,EAC1C,OAAO;AACL,UAAM,EAAE,SAAS,IAAI,IAAI,SAAS,GAAG;AACrC,iBAAa,mBAAmB,SAAS,EAAE,GAAG,SAAS,OAAO,IAAI,KAAK,CAAC;AAAA,EAC1E;AAEA,QAAM,sBAAsB,2BAA2B,mBAAmB,EAAE,GAAG,YAAY,GAAG,UAAU,CAAC,CAAC;AAC1G,SAAO,yBAAyB,CAAC,GAAG,mBAAmB;AACzD;AAEA,MAAM,WAAW,CAAC,QAAqB;AACrC,QAAM,cAAc,UAAU,KAAK,UAAU,QAAQ,OAAO;AAC5D,QAAM,cAAc,UAAU,KAAK,eAAe,GAAG,QAAQ,WAAW,EAAE;AAC1E,SAAO,UAAU,eAAe,eAAe,EAAE;AACnD;","names":[]}