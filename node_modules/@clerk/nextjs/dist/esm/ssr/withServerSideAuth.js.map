{"version":3,"sources":["../../../src/ssr/withServerSideAuth.ts"],"sourcesContent":["import type { RequestState } from '@clerk/backend';\nimport { constants, debugRequestState } from '@clerk/backend';\nimport type { ServerResponse } from 'http';\nimport type { GetServerSidePropsContext, GetServerSidePropsResult } from 'next';\n\nimport {\n  API_URL,\n  CLERK_JS_URL,\n  CLERK_JS_VERSION,\n  clerkClient,\n  FRONTEND_API,\n  JS_VERSION,\n  makeAuthObjectSerializable,\n  PUBLISHABLE_KEY,\n  sanitizeAuthObject,\n} from '../server/clerkClient';\nimport type { WithServerSideAuthCallback, WithServerSideAuthOptions, WithServerSideAuthResult } from './types';\nimport { authenticateRequest, injectAuthIntoRequest, injectSSRStateIntoProps } from './utils';\n\nconst EMPTY_GSSP_RESPONSE = { props: {} };\n\ninterface WithServerSideAuth {\n  <\n    CallbackReturn extends GetServerSidePropsResult<any> | Promise<GetServerSidePropsResult<any>>,\n    Options extends WithServerSideAuthOptions,\n  >(\n    callback: WithServerSideAuthCallback<CallbackReturn, Options>,\n    opts?: Options,\n  ): WithServerSideAuthResult<CallbackReturn>;\n  (opts?: WithServerSideAuthOptions): WithServerSideAuthResult<void>;\n}\n\nconst decorateResponseWithObservabilityHeaders = (res: ServerResponse, requestState: RequestState) => {\n  requestState.message && res.setHeader(constants.Headers.AuthMessage, encodeURIComponent(requestState.message));\n  requestState.reason && res.setHeader(constants.Headers.AuthReason, encodeURIComponent(requestState.reason));\n  requestState.status && res.setHeader(constants.Headers.AuthStatus, encodeURIComponent(requestState.status));\n};\n\n/**\n * @deprecated The /ssr path is deprecated and will be removed in the next major release.\n * Use the exports from /server instead\n */\nexport const withServerSideAuth: WithServerSideAuth = (cbOrOptions: any, options?: any): any => {\n  const cb = typeof cbOrOptions === 'function' ? cbOrOptions : undefined;\n  const opts = (options ? options : typeof cbOrOptions !== 'function' ? cbOrOptions : {}) || {};\n\n  // Support both loadOrganization and the older loadOrg option without breaking changes\n  // TODO: Remove pre v5\n  opts.loadOrganization = opts.loadOrganization || opts.loadOrg || undefined;\n\n  return async (ctx: GetServerSidePropsContext) => {\n    const requestState = await authenticateRequest(ctx, opts);\n\n    if (requestState.isUnknown) {\n      decorateResponseWithObservabilityHeaders(ctx.res, requestState);\n      ctx.res.writeHead(401, { 'Content-Type': 'text/html' });\n      ctx.res.end();\n      return EMPTY_GSSP_RESPONSE;\n    }\n    if (requestState.isInterstitial) {\n      decorateResponseWithObservabilityHeaders(ctx.res, requestState);\n      ctx.res.writeHead(401, { 'Content-Type': 'text/html' });\n      const interstitial = await clerkClient.remotePublicInterstitial({\n        apiUrl: API_URL,\n        publishableKey: PUBLISHABLE_KEY,\n        frontendApi: FRONTEND_API,\n        pkgVersion: JS_VERSION,\n        clerkJSUrl: CLERK_JS_URL,\n        clerkJSVersion: CLERK_JS_VERSION,\n        proxyUrl: requestState.proxyUrl as any,\n        isSatellite: requestState.isSatellite,\n        domain: requestState.domain as any,\n        debugData: debugRequestState(requestState),\n      });\n      ctx.res.end(interstitial);\n      return EMPTY_GSSP_RESPONSE;\n    }\n\n    const legacyAuthData = { ...requestState.toAuth(), claims: requestState.toAuth().sessionClaims };\n    const contextWithAuth = injectAuthIntoRequest(ctx, legacyAuthData);\n    const callbackResult = (await cb?.(contextWithAuth)) || {};\n    return injectSSRStateIntoProps(callbackResult, makeAuthObjectSerializable(sanitizeAuthObject(legacyAuthData)));\n  };\n};\n"],"mappings":"AACA,SAAS,WAAW,yBAAyB;AAI7C;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AAEP,SAAS,qBAAqB,uBAAuB,+BAA+B;AAEpF,MAAM,sBAAsB,EAAE,OAAO,CAAC,EAAE;AAaxC,MAAM,2CAA2C,CAAC,KAAqB,iBAA+B;AACpG,eAAa,WAAW,IAAI,UAAU,UAAU,QAAQ,aAAa,mBAAmB,aAAa,OAAO,CAAC;AAC7G,eAAa,UAAU,IAAI,UAAU,UAAU,QAAQ,YAAY,mBAAmB,aAAa,MAAM,CAAC;AAC1G,eAAa,UAAU,IAAI,UAAU,UAAU,QAAQ,YAAY,mBAAmB,aAAa,MAAM,CAAC;AAC5G;AAMO,MAAM,qBAAyC,CAAC,aAAkB,YAAuB;AAC9F,QAAM,KAAK,OAAO,gBAAgB,aAAa,cAAc;AAC7D,QAAM,QAAQ,UAAU,UAAU,OAAO,gBAAgB,aAAa,cAAc,CAAC,MAAM,CAAC;AAI5F,OAAK,mBAAmB,KAAK,oBAAoB,KAAK,WAAW;AAEjE,SAAO,OAAO,QAAmC;AAC/C,UAAM,eAAe,MAAM,oBAAoB,KAAK,IAAI;AAExD,QAAI,aAAa,WAAW;AAC1B,+CAAyC,IAAI,KAAK,YAAY;AAC9D,UAAI,IAAI,UAAU,KAAK,EAAE,gBAAgB,YAAY,CAAC;AACtD,UAAI,IAAI,IAAI;AACZ,aAAO;AAAA,IACT;AACA,QAAI,aAAa,gBAAgB;AAC/B,+CAAyC,IAAI,KAAK,YAAY;AAC9D,UAAI,IAAI,UAAU,KAAK,EAAE,gBAAgB,YAAY,CAAC;AACtD,YAAM,eAAe,MAAM,YAAY,yBAAyB;AAAA,QAC9D,QAAQ;AAAA,QACR,gBAAgB;AAAA,QAChB,aAAa;AAAA,QACb,YAAY;AAAA,QACZ,YAAY;AAAA,QACZ,gBAAgB;AAAA,QAChB,UAAU,aAAa;AAAA,QACvB,aAAa,aAAa;AAAA,QAC1B,QAAQ,aAAa;AAAA,QACrB,WAAW,kBAAkB,YAAY;AAAA,MAC3C,CAAC;AACD,UAAI,IAAI,IAAI,YAAY;AACxB,aAAO;AAAA,IACT;AAEA,UAAM,iBAAiB,EAAE,GAAG,aAAa,OAAO,GAAG,QAAQ,aAAa,OAAO,EAAE,cAAc;AAC/F,UAAM,kBAAkB,sBAAsB,KAAK,cAAc;AACjE,UAAM,iBAAkB,MAAM,KAAK,eAAe,KAAM,CAAC;AACzD,WAAO,wBAAwB,gBAAgB,2BAA2B,mBAAmB,cAAc,CAAC,CAAC;AAAA,EAC/G;AACF;","names":[]}