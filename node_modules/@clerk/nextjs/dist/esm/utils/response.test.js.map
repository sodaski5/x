{"version":3,"sources":["../../../src/utils/response.test.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\n\nimport { mergeResponses } from './response';\n\ndescribe('mergeResponses', function () {\n  it('should fail unless one response is passed', function () {\n    expect(mergeResponses(null, undefined)).toBe(undefined);\n  });\n\n  it('should handle non-response values', function () {\n    const response1 = new NextResponse();\n    response1.headers.set('foo', '1');\n    const finalResponse = mergeResponses(null, undefined, response1);\n    expect(finalResponse!.headers.get('foo')).toEqual('1');\n  });\n\n  it('should merge the headers', function () {\n    const response1 = new NextResponse();\n    const response2 = new NextResponse();\n    response1.headers.set('foo', '1');\n    response1.headers.set('bar', '1');\n    response2.headers.set('bar', '2');\n    const finalResponse = mergeResponses(response1, response2);\n    expect(finalResponse!.headers.get('foo')).toEqual('1');\n    expect(finalResponse!.headers.get('bar')).toEqual('2');\n  });\n\n  it('should merge the cookies', function () {\n    const response1 = new NextResponse();\n    const response2 = new NextResponse();\n    response1.cookies.set('foo', '1');\n    response1.cookies.set('bar', '1');\n    response2.cookies.set('bar', '2');\n    const finalResponse = mergeResponses(response1, response2);\n    expect(finalResponse!.cookies.get('foo')).toEqual(response1.cookies.get('foo'));\n    expect(finalResponse!.cookies.get('bar')).toEqual(response2.cookies.get('bar'));\n  });\n\n  it('should use the status of the last response', function () {\n    const response1 = new NextResponse('', { status: 200, statusText: 'OK' });\n    const response2 = new NextResponse('', { status: 201, statusText: 'Created' });\n    const finalResponse = mergeResponses(response1, response2);\n    expect(finalResponse!.status).toEqual(response2.status);\n    expect(finalResponse!.statusText).toEqual(response2.statusText);\n  });\n\n  it('should use the body of the last response', function () {\n    const response1 = new NextResponse('1');\n    const response2 = new NextResponse('2');\n    const finalResponse = mergeResponses(response1, response2);\n    expect(finalResponse!.body).toEqual(response2.body);\n  });\n});\n"],"mappings":"AAAA,SAAS,oBAAoB;AAE7B,SAAS,sBAAsB;AAE/B,SAAS,kBAAkB,WAAY;AACrC,KAAG,6CAA6C,WAAY;AAC1D,WAAO,eAAe,MAAM,MAAS,CAAC,EAAE,KAAK,MAAS;AAAA,EACxD,CAAC;AAED,KAAG,qCAAqC,WAAY;AAClD,UAAM,YAAY,IAAI,aAAa;AACnC,cAAU,QAAQ,IAAI,OAAO,GAAG;AAChC,UAAM,gBAAgB,eAAe,MAAM,QAAW,SAAS;AAC/D,WAAO,cAAe,QAAQ,IAAI,KAAK,CAAC,EAAE,QAAQ,GAAG;AAAA,EACvD,CAAC;AAED,KAAG,4BAA4B,WAAY;AACzC,UAAM,YAAY,IAAI,aAAa;AACnC,UAAM,YAAY,IAAI,aAAa;AACnC,cAAU,QAAQ,IAAI,OAAO,GAAG;AAChC,cAAU,QAAQ,IAAI,OAAO,GAAG;AAChC,cAAU,QAAQ,IAAI,OAAO,GAAG;AAChC,UAAM,gBAAgB,eAAe,WAAW,SAAS;AACzD,WAAO,cAAe,QAAQ,IAAI,KAAK,CAAC,EAAE,QAAQ,GAAG;AACrD,WAAO,cAAe,QAAQ,IAAI,KAAK,CAAC,EAAE,QAAQ,GAAG;AAAA,EACvD,CAAC;AAED,KAAG,4BAA4B,WAAY;AACzC,UAAM,YAAY,IAAI,aAAa;AACnC,UAAM,YAAY,IAAI,aAAa;AACnC,cAAU,QAAQ,IAAI,OAAO,GAAG;AAChC,cAAU,QAAQ,IAAI,OAAO,GAAG;AAChC,cAAU,QAAQ,IAAI,OAAO,GAAG;AAChC,UAAM,gBAAgB,eAAe,WAAW,SAAS;AACzD,WAAO,cAAe,QAAQ,IAAI,KAAK,CAAC,EAAE,QAAQ,UAAU,QAAQ,IAAI,KAAK,CAAC;AAC9E,WAAO,cAAe,QAAQ,IAAI,KAAK,CAAC,EAAE,QAAQ,UAAU,QAAQ,IAAI,KAAK,CAAC;AAAA,EAChF,CAAC;AAED,KAAG,8CAA8C,WAAY;AAC3D,UAAM,YAAY,IAAI,aAAa,IAAI,EAAE,QAAQ,KAAK,YAAY,KAAK,CAAC;AACxE,UAAM,YAAY,IAAI,aAAa,IAAI,EAAE,QAAQ,KAAK,YAAY,UAAU,CAAC;AAC7E,UAAM,gBAAgB,eAAe,WAAW,SAAS;AACzD,WAAO,cAAe,MAAM,EAAE,QAAQ,UAAU,MAAM;AACtD,WAAO,cAAe,UAAU,EAAE,QAAQ,UAAU,UAAU;AAAA,EAChE,CAAC;AAED,KAAG,4CAA4C,WAAY;AACzD,UAAM,YAAY,IAAI,aAAa,GAAG;AACtC,UAAM,YAAY,IAAI,aAAa,GAAG;AACtC,UAAM,gBAAgB,eAAe,WAAW,SAAS;AACzD,WAAO,cAAe,IAAI,EAAE,QAAQ,UAAU,IAAI;AAAA,EACpD,CAAC;AACH,CAAC;","names":[]}