{"version":3,"sources":["../../../src/utils/response.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\n\nimport { constants as nextConstants } from '../constants';\n\n/**\n * A function that merges two Response objects into a single response.\n * The final response respects the body and the status of the last response,\n * but the cookies and headers of all responses are merged.\n */\nexport const mergeResponses = (...responses: (NextResponse | Response | null | undefined | void)[]) => {\n  const normalisedResponses = responses.filter(Boolean).map(res => new NextResponse(res!.body, res!));\n  if (normalisedResponses.length === 0) {\n    return;\n  }\n\n  const lastResponse = normalisedResponses[normalisedResponses.length - 1];\n  const finalResponse = new NextResponse(lastResponse.body, lastResponse);\n\n  for (const response of normalisedResponses) {\n    response.headers.forEach((value: string, name: string) => {\n      finalResponse.headers.set(name, value);\n    });\n\n    response.cookies.getAll().forEach(cookie => {\n      finalResponse.cookies.set(cookie.name, cookie.value);\n    });\n  }\n\n  return finalResponse;\n};\n\nexport const isRedirect = (res: Response) => {\n  return res.headers.get(nextConstants.Headers.NextRedirect);\n};\n\nexport const setHeader = (res: Response, name: string, val: string) => {\n  res.headers.set(name, val);\n  return res;\n};\n\nexport const stringifyHeaders = (headers: { forEach: Headers['forEach'] }) => {\n  if (!headers) {\n    return JSON.stringify({});\n  }\n\n  const obj: Record<string, string> = {};\n  headers.forEach((value, name) => {\n    obj[name] = value;\n  });\n  return JSON.stringify(obj);\n};\n"],"mappings":"AAAA,SAAS,oBAAoB;AAE7B,SAAS,aAAa,qBAAqB;AAOpC,MAAM,iBAAiB,IAAI,cAAqE;AACrG,QAAM,sBAAsB,UAAU,OAAO,OAAO,EAAE,IAAI,SAAO,IAAI,aAAa,IAAK,MAAM,GAAI,CAAC;AAClG,MAAI,oBAAoB,WAAW,GAAG;AACpC;AAAA,EACF;AAEA,QAAM,eAAe,oBAAoB,oBAAoB,SAAS,CAAC;AACvE,QAAM,gBAAgB,IAAI,aAAa,aAAa,MAAM,YAAY;AAEtE,aAAW,YAAY,qBAAqB;AAC1C,aAAS,QAAQ,QAAQ,CAAC,OAAe,SAAiB;AACxD,oBAAc,QAAQ,IAAI,MAAM,KAAK;AAAA,IACvC,CAAC;AAED,aAAS,QAAQ,OAAO,EAAE,QAAQ,YAAU;AAC1C,oBAAc,QAAQ,IAAI,OAAO,MAAM,OAAO,KAAK;AAAA,IACrD,CAAC;AAAA,EACH;AAEA,SAAO;AACT;AAEO,MAAM,aAAa,CAAC,QAAkB;AAC3C,SAAO,IAAI,QAAQ,IAAI,cAAc,QAAQ,YAAY;AAC3D;AAEO,MAAM,YAAY,CAAC,KAAe,MAAc,QAAgB;AACrE,MAAI,QAAQ,IAAI,MAAM,GAAG;AACzB,SAAO;AACT;AAEO,MAAM,mBAAmB,CAAC,YAA6C;AAC5E,MAAI,CAAC,SAAS;AACZ,WAAO,KAAK,UAAU,CAAC,CAAC;AAAA,EAC1B;AAEA,QAAM,MAA8B,CAAC;AACrC,UAAQ,QAAQ,CAAC,OAAO,SAAS;AAC/B,QAAI,IAAI,IAAI;AAAA,EACd,CAAC;AACD,SAAO,KAAK,UAAU,GAAG;AAC3B;","names":[]}