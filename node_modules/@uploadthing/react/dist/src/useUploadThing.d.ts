import type { ExpandedRouteConfig } from "@uploadthing/shared";
import { UploadThingError } from "@uploadthing/shared";
import type { UploadFileResponse } from "uploadthing/client";
import type { FileRouter, inferEndpointInput, inferErrorShape } from "uploadthing/server";
export type UseUploadthingProps<TRouter extends FileRouter> = {
    onClientUploadComplete?: (res?: UploadFileResponse[]) => void;
    onUploadProgress?: (p: number) => void;
    onUploadError?: (e: UploadThingError<inferErrorShape<TRouter>>) => void;
};
export declare const INTERNAL_uploadthingHookGen: <TRouter extends FileRouter>() => <TEndpoint extends keyof TRouter>(endpoint: TEndpoint, opts?: UseUploadthingProps<TRouter> | undefined) => {
    readonly startUpload: (...args: undefined extends inferEndpointInput<TRouter[TEndpoint]> ? [files: File[], input?: undefined | undefined] : [files: File[], input: inferEndpointInput<TRouter[TEndpoint]>]) => Promise<UploadFileResponse[] | undefined>;
    readonly isUploading: boolean;
    readonly permittedFileInfo: {
        slug: string;
        config: ExpandedRouteConfig;
    } | undefined;
};
export declare const generateReactHelpers: <TRouter extends FileRouter>() => {
    readonly useUploadThing: <TEndpoint extends keyof TRouter>(endpoint: TEndpoint, opts?: UseUploadthingProps<TRouter> | undefined) => {
        readonly startUpload: (...args: undefined extends inferEndpointInput<TRouter[TEndpoint]> ? [files: File[], input?: (inferEndpointInput<TRouter[TEndpoint]> & undefined) | undefined] : [files: File[], input: inferEndpointInput<TRouter[TEndpoint]>]) => Promise<UploadFileResponse[] | undefined>;
        readonly isUploading: boolean;
        readonly permittedFileInfo: {
            slug: string;
            config: ExpandedRouteConfig;
        } | undefined;
    };
    readonly uploadFiles: (opts: { [TEndpoint_1 in keyof TRouter]: {
        endpoint: TEndpoint_1;
        onUploadProgress?: (({ file, progress, }: {
            file: string;
            progress: number;
        }) => void) | undefined;
        input?: inferEndpointInput<TRouter[TEndpoint_1]> | undefined;
        files: File[];
    }; }[keyof TRouter], config?: {
        url?: string | undefined;
    } | undefined) => Promise<UploadFileResponse[]>;
};
export type FullFile = {
    file: File;
    contents: string;
};
//# sourceMappingURL=useUploadThing.d.ts.map