"use client";
import {
  INTERNAL_uploadthingHookGen
} from "./chunk-HRSKA5IZ.mjs";

// src/component.tsx
import { useCallback, useRef, useState } from "react";
import { useDropzone } from "react-dropzone";
import {
  classNames,
  generateClientDropzoneAccept,
  generateMimeTypes
} from "uploadthing/client";
import { Fragment, jsx, jsxs } from "react/jsx-runtime";
var generatePermittedFileTypes = (config) => {
  const fileTypes = config ? Object.keys(config) : [];
  const maxFileCount = config ? Object.values(config).map((v) => v.maxFileCount) : [];
  return { fileTypes, multiple: maxFileCount.some((v) => v && v > 1) };
};
var capitalizeStart = (str) => {
  return str.charAt(0).toUpperCase() + str.slice(1);
};
var INTERNAL_doFormatting = (config) => {
  if (!config)
    return "";
  const allowedTypes = Object.keys(config);
  const formattedTypes = allowedTypes.map((f) => {
    if (f.includes("/"))
      return `${f.split("/")[1].toUpperCase()} file`;
    return f === "blob" ? "file" : f;
  });
  if (formattedTypes.length > 1) {
    const lastType = formattedTypes.pop();
    return `${formattedTypes.join("s, ")} and ${lastType}s`;
  }
  const key = allowedTypes[0];
  const formattedKey = formattedTypes[0];
  const { maxFileSize, maxFileCount } = config[key];
  if (maxFileCount && maxFileCount > 1) {
    return `${formattedKey}s up to ${maxFileSize}, max ${maxFileCount}`;
  } else {
    return `${formattedKey} (${maxFileSize})`;
  }
};
var allowedContentTextLabelGenerator = (config) => {
  return capitalizeStart(INTERNAL_doFormatting(config));
};
var progressHeights = {
  0: "after:ut-w-0",
  10: "after:ut-w-[10%]",
  20: "after:ut-w-[20%]",
  30: "after:ut-w-[30%]",
  40: "after:ut-w-[40%]",
  50: "after:ut-w-[50%]",
  60: "after:ut-w-[60%]",
  70: "after:ut-w-[70%]",
  80: "after:ut-w-[80%]",
  90: "after:ut-w-[90%]",
  100: "after:ut-w-[100%]"
};
function UploadButton(props) {
  var _a;
  const $props = props;
  const useUploadThing = INTERNAL_uploadthingHookGen();
  const fileInputRef = useRef(null);
  const [uploadProgress, setUploadProgress] = useState(0);
  const { startUpload, isUploading, permittedFileInfo } = useUploadThing(
    $props.endpoint,
    {
      onClientUploadComplete: (res) => {
        var _a2;
        if (fileInputRef.current) {
          fileInputRef.current.value = "";
        }
        (_a2 = $props.onClientUploadComplete) == null ? void 0 : _a2.call($props, res);
        setUploadProgress(0);
      },
      onUploadProgress: (p) => {
        var _a2;
        setUploadProgress(p);
        (_a2 = $props.onUploadProgress) == null ? void 0 : _a2.call($props, p);
      },
      onUploadError: $props.onUploadError
    }
  );
  const { fileTypes, multiple } = generatePermittedFileTypes(
    permittedFileInfo == null ? void 0 : permittedFileInfo.config
  );
  const ready = fileTypes.length > 0;
  const getUploadButtonText = (fileTypes2) => {
    if (!(fileTypes2.length > 0))
      return "Loading...";
    return `Choose File${multiple ? `(s)` : ``}`;
  };
  return /* @__PURE__ */ jsxs("div", { className: "ut-flex ut-flex-col ut-items-center ut-justify-center ut-gap-1", children: [
    /* @__PURE__ */ jsxs(
      "label",
      {
        className: classNames(
          "ut-relative ut-flex ut-h-10 ut-w-36 ut-cursor-pointer ut-items-center ut-justify-center ut-overflow-hidden ut-rounded-md after:ut-transition-[width] after:ut-duration-500",
          !ready && "ut-cursor-not-allowed ut-bg-blue-400",
          ready && isUploading && `ut-bg-blue-400 after:ut-absolute after:ut-left-0 after:ut-h-full after:ut-bg-blue-600 ${progressHeights[uploadProgress]}`,
          ready && !isUploading && "ut-bg-blue-600"
        ),
        children: [
          /* @__PURE__ */ jsx(
            "input",
            {
              className: "ut-hidden",
              type: "file",
              ref: fileInputRef,
              multiple,
              accept: (_a = generateMimeTypes(fileTypes ?? [])) == null ? void 0 : _a.join(", "),
              onChange: (e) => {
                if (!e.target.files)
                  return;
                const input = "input" in $props ? $props.input : void 0;
                const files = Array.from(e.target.files);
                void startUpload(files, input);
              },
              disabled: !ready
            }
          ),
          /* @__PURE__ */ jsx("span", { className: "ut-z-10 ut-px-3 ut-py-2 ut-text-white", children: isUploading ? /* @__PURE__ */ jsx(Spinner, {}) : getUploadButtonText(fileTypes) })
        ]
      }
    ),
    /* @__PURE__ */ jsx("div", { className: "ut-h-[1.25rem]", children: fileTypes && /* @__PURE__ */ jsx("p", { className: "ut-m-0 ut-text-xs ut-leading-5 ut-text-gray-600", children: allowedContentTextLabelGenerator(permittedFileInfo == null ? void 0 : permittedFileInfo.config) }) })
  ] });
}
function UploadDropzone(props) {
  const $props = props;
  const useUploadThing = INTERNAL_uploadthingHookGen();
  const [files, setFiles] = useState([]);
  const onDrop = useCallback((acceptedFiles) => {
    setFiles(acceptedFiles);
  }, []);
  const [uploadProgress, setUploadProgress] = useState(0);
  const { startUpload, isUploading, permittedFileInfo } = useUploadThing(
    $props.endpoint,
    {
      onClientUploadComplete: (res) => {
        var _a;
        setFiles([]);
        (_a = $props.onClientUploadComplete) == null ? void 0 : _a.call($props, res);
        setUploadProgress(0);
      },
      onUploadProgress: (p) => {
        var _a;
        setUploadProgress(p);
        (_a = $props.onUploadProgress) == null ? void 0 : _a.call($props, p);
      },
      onUploadError: $props.onUploadError
    }
  );
  const { fileTypes } = generatePermittedFileTypes(permittedFileInfo == null ? void 0 : permittedFileInfo.config);
  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: fileTypes ? generateClientDropzoneAccept(fileTypes) : void 0
  });
  const ready = fileTypes.length > 0;
  return /* @__PURE__ */ jsx(
    "div",
    {
      className: classNames(
        "ut-mt-2 ut-flex ut-justify-center ut-rounded-lg ut-border ut-border-dashed ut-border-gray-900/25 ut-px-6 ut-py-10",
        isDragActive ? "ut-bg-blue-600/10" : ""
      ),
      children: /* @__PURE__ */ jsxs("div", { className: "ut-text-center", ...getRootProps(), children: [
        /* @__PURE__ */ jsx(
          "svg",
          {
            xmlns: "http://www.w3.org/2000/svg",
            viewBox: "0 0 20 20",
            className: "ut-mx-auto ut-block ut-h-12 ut-w-12 ut-align-middle ut-text-gray-400",
            children: /* @__PURE__ */ jsx(
              "path",
              {
                fill: "currentColor",
                fillRule: "evenodd",
                d: "M5.5 17a4.5 4.5 0 0 1-1.44-8.765a4.5 4.5 0 0 1 8.302-3.046a3.5 3.5 0 0 1 4.504 4.272A4 4 0 0 1 15 17H5.5Zm3.75-2.75a.75.75 0 0 0 1.5 0V9.66l1.95 2.1a.75.75 0 1 0 1.1-1.02l-3.25-3.5a.75.75 0 0 0-1.1 0l-3.25 3.5a.75.75 0 1 0 1.1 1.02l1.95-2.1v4.59Z",
                clipRule: "evenodd"
              }
            )
          }
        ),
        /* @__PURE__ */ jsx("div", { className: "ut-mt-4 ut-flex ut-text-sm ut-leading-6 ut-text-gray-600", children: /* @__PURE__ */ jsxs(
          "label",
          {
            htmlFor: "file-upload",
            className: classNames(
              "ut-relative ut-cursor-pointer ut-font-semibold  focus-within:ut-outline-none focus-within:ut-ring-2 focus-within:ut-ring-blue-600 focus-within:ut-ring-offset-2 hover:ut-text-blue-500",
              ready ? "ut-text-blue-600" : "ut-text-gray-500"
            ),
            children: [
              /* @__PURE__ */ jsx("span", { className: "ut-flex ut-w-64 ut-items-center ut-justify-center", children: ready ? `Choose files or drag and drop` : `Loading...` }),
              /* @__PURE__ */ jsx(
                "input",
                {
                  className: "ut-sr-only",
                  ...getInputProps(),
                  disabled: !ready
                }
              )
            ]
          }
        ) }),
        /* @__PURE__ */ jsx("div", { className: "ut-h-[1.25rem]", children: /* @__PURE__ */ jsx("p", { className: "ut-m-0 ut-text-xs ut-leading-5 ut-text-gray-600", children: allowedContentTextLabelGenerator(permittedFileInfo == null ? void 0 : permittedFileInfo.config) }) }),
        files.length > 0 && /* @__PURE__ */ jsx("div", { className: "ut-mt-4 ut-flex ut-items-center ut-justify-center", children: /* @__PURE__ */ jsx(
          "button",
          {
            className: classNames(
              "ut-relative ut-flex ut-h-10 ut-w-36 ut-items-center ut-justify-center ut-overflow-hidden ut-rounded-md after:ut-transition-[width] after:ut-duration-500",
              isUploading ? `ut-bg-blue-400 after:ut-absolute after:ut-left-0 after:ut-h-full after:ut-bg-blue-600 ${progressHeights[uploadProgress]}` : "ut-bg-blue-600"
            ),
            onClick: (e) => {
              e.preventDefault();
              e.stopPropagation();
              if (!files)
                return;
              const input = "input" in $props ? $props.input : void 0;
              void startUpload(files, input);
            },
            children: /* @__PURE__ */ jsx("span", { className: "ut-z-10 ut-px-3 ut-py-2 ut-text-white", children: isUploading ? /* @__PURE__ */ jsx(Spinner, {}) : `Upload ${files.length} file${files.length === 1 ? "" : "s"}` })
          }
        ) })
      ] })
    }
  );
}
function Uploader(props) {
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsxs("div", { className: "ut-flex ut-flex-col ut-items-center ut-justify-center ut-gap-4", children: [
      /* @__PURE__ */ jsx("span", { className: "ut-text-center ut-text-4xl ut-font-bold", children: `Upload a file using a button:` }),
      /* @__PURE__ */ jsx(UploadButton, { ...props })
    ] }),
    /* @__PURE__ */ jsxs("div", { className: "ut-flex ut-flex-col ut-items-center ut-justify-center ut-gap-4", children: [
      /* @__PURE__ */ jsx("span", { className: "ut-text-center ut-text-4xl ut-font-bold", children: `...or using a dropzone:` }),
      /* @__PURE__ */ jsx(UploadDropzone, { ...props })
    ] })
  ] });
}
function Spinner() {
  return /* @__PURE__ */ jsx(
    "svg",
    {
      className: "ut-block ut-h-5 ut-w-5 ut-animate-spin ut-align-middle ut-text-white",
      xmlns: "http://www.w3.org/2000/svg",
      fill: "none",
      viewBox: "0 0 576 512",
      children: /* @__PURE__ */ jsx(
        "path",
        {
          fill: "currentColor",
          d: "M256 32C256 14.33 270.3 0 288 0C429.4 0 544 114.6 544 256C544 302.6 531.5 346.4 509.7 384C500.9 399.3 481.3 404.6 465.1 395.7C450.7 386.9 445.5 367.3 454.3 351.1C470.6 323.8 480 291 480 255.1C480 149.1 394 63.1 288 63.1C270.3 63.1 256 49.67 256 31.1V32z"
        }
      )
    }
  );
}
function generateComponents() {
  return {
    UploadButton,
    UploadDropzone,
    Uploader
  };
}
export {
  UploadButton,
  UploadDropzone,
  Uploader,
  generateComponents
};
//# sourceMappingURL=index.mjs.map