import { F as FileRouter, U as UploadBuilder } from './types-4f6e81ca.js';
export { b as AnyParams, A as AnyRuntime, E as ErrorMessage, M as MaybePromise, S as Simplify, a as UnsetMarker, c as UploadBuilderDef, d as Uploader, i as inferEndpointInput, e as inferErrorShape, u as unsetMarker } from './types-4f6e81ca.js';
import * as _uploadthing_shared from '@uploadthing/shared';
import { Json } from '@uploadthing/shared';
import { R as RouterWithConfig, C as CreateBuilderOptions } from './handler-2fa97a9b.js';
import 'next';
import 'next/server';

type FileEsque = Blob & {
    name: string;
};
type UploadData = {
    key: string;
    url: string;
    name: string;
    size: number;
};
type UploadError = {
    code: string;
    message: string;
    data: any;
};

type UploadFileResponse = {
    data: UploadData;
    error: null;
} | {
    data: null;
    error: UploadError;
};
/**
 * @param {FileEsque | FileEsque[]} files The file(s) to upload
 * @param {Json} metadata JSON-parseable metadata to attach to the uploaded file(s)
 *
 * @example
 * await uploadFiles(new File(["foo"], "foo.txt"));
 *
 * @example
 * await uploadFiles([
 *   new File(["foo"], "foo.txt"),
 *   new File(["bar"], "bar.txt"),
 * ]);
 */
declare const uploadFiles: <T extends FileEsque | FileEsque[]>(files: T, metadata?: Json) => Promise<T extends FileEsque[] ? UploadFileResponse[] : UploadFileResponse>;
/**
 * @param {string} url The URL of the file to upload
 * @param {Json} metadata JSON-parseable metadata to attach to the uploaded file(s)
 *
 * @example
 * await uploadFileFromUrl("https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg");
 *
 * @example
 * await uploadFileFromUrl([
 *   "https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg",
 *   "https://uploadthing.com/f/1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg"
 * ])
 */
type Url = string | URL;
declare const uploadFilesFromUrl: <T extends Url | Url[]>(urls: T, metadata?: Json) => Promise<T extends Url[] ? UploadFileResponse[] : UploadFileResponse>;
/**
 * Request to delete files from UploadThing storage.
 * @param {string | string[]} fileKeys
 *
 * @example
 * await deleteFiles("2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg");
 *
 * @example
 * await deleteFiles(["2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg","1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg"])
 */
declare const deleteFiles: (fileKeys: string[] | string) => Promise<{
    success: boolean;
}>;
/**
 * Request file URLs from UploadThing storage.
 * @param {string | string[]} fileKeys
 *
 * @example
 * const data = await getFileUrls("2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg");
 * console.log(data); // [{key: "2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg", url: "https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg"}]
 *
 * @example
 * const data = await getFileUrls(["2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg","1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg"])
 * console.log(data) // [{key: "2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg", url: "https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg" },{key: "1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg", url: "https://uploadthing.com/f/1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg"}]
 */
declare const getFileUrls: (fileKeys: string[] | string) => Promise<{
    key: string;
    url: string;
}[]>;
/**
 * Request file list from UploadThing storage.
 *
 * @example
 * const data = await listFiles();
 * console.log(data); // { key: "2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg", id: "2e0fdb64-9957-4262-8e45-f372ba903ac8" }
 */
declare const listFiles: () => Promise<{
    key: string;
    id: string;
}[]>;
/**
 * Rename a file in UploadThing storage.
 *
 * type Rename = {
 *   fileKey: string;
 *   newName: string; // Should include file extension
 * };
 *
 * @param {Rename | Rename[]} updates
 *
 * @example
 * await renameFile({ fileKey: "2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg", newName: "new_image.jpg" });
 *
 * @example
 * await renameFile([{ fileKey: "2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg", newName: "new_image.jpg" }, { fileKey: "1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg", newName: "new_image2.jpg" }]);
 *
 */
type Rename = {
    fileKey: string;
    newName: string;
};
declare const renameFile: (updates: Rename | Rename[]) => Promise<{
    success: true;
}>;

declare const index_deleteFiles: typeof deleteFiles;
declare const index_getFileUrls: typeof getFileUrls;
declare const index_listFiles: typeof listFiles;
declare const index_renameFile: typeof renameFile;
declare const index_uploadFiles: typeof uploadFiles;
declare const index_uploadFilesFromUrl: typeof uploadFilesFromUrl;
declare namespace index {
  export {
    index_deleteFiles as deleteFiles,
    index_getFileUrls as getFileUrls,
    index_listFiles as listFiles,
    index_renameFile as renameFile,
    index_uploadFiles as uploadFiles,
    index_uploadFilesFromUrl as uploadFilesFromUrl,
  };
}

declare const createServerHandler: (opts: RouterWithConfig<FileRouter>) => {
    GET: (event: {
        request: Request;
    } | Request) => Response | Promise<Response>;
    POST: (event: {
        request: Request;
    } | Request) => Response | Promise<Response>;
};

declare const createUploadthing: <TErrorShape extends Json>(opts?: CreateBuilderOptions<TErrorShape> | undefined) => (input: _uploadthing_shared.FileRouterInputConfig) => UploadBuilder<{
    _input: "unsetMarker" & {
        __brand: "unsetMarker";
    };
    _metadata: "unsetMarker" & {
        __brand: "unsetMarker";
    };
    _runtime: "web";
    _errorShape: TErrorShape;
}>;

export { FileRouter, UploadBuilder, createServerHandler, createUploadthing, index as utapi };
