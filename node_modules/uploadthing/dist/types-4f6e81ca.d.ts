import { NextApiRequest, NextApiResponse } from 'next';
import { NextRequest } from 'next/server';
import { Json, FileRouterInputConfig, UploadThingError, UploadedFile } from '@uploadthing/shared';

type ParseFn<TType> = (input: unknown) => MaybePromise<TType>;
type ParserZodEsque<TInput, TParsedInput extends Json> = {
    _input: TInput;
    _output: TParsedInput;
    parse: ParseFn<TParsedInput>;
};
type JsonParser = ParserZodEsque<Json, Json>;

declare const unsetMarker: "unsetMarker" & {
    __brand: "unsetMarker";
};
type UnsetMarker = typeof unsetMarker;
type Simplify<TType> = {
    [TKey in keyof TType]: TType[TKey];
} & {};
type MaybePromise<TType> = TType | Promise<TType>;
type ResolverOptions<TParams extends AnyParams> = {
    metadata: Simplify<TParams["_metadata"] extends UnsetMarker ? undefined : TParams["_metadata"]>;
    file: UploadedFile;
};
type AnyRuntime = "app" | "pages" | "web";
interface AnyParams {
    _input: any;
    _metadata: any;
    _runtime: any;
    _errorShape: any;
}
type MiddlewareFnArgs<TParams extends AnyParams> = TParams["_runtime"] extends "web" ? {
    req: Request;
    res?: never;
    input: TParams["_input"];
} : TParams["_runtime"] extends "app" ? {
    req: NextRequest;
    res?: never;
    input: TParams["_input"];
} : {
    req: NextApiRequest;
    res: NextApiResponse;
    input: TParams["_input"];
};
type MiddlewareFn<TOutput extends Record<string, unknown>, TParams extends AnyParams> = (opts: MiddlewareFnArgs<TParams>) => MaybePromise<TOutput>;
type ResolverFn<TParams extends AnyParams> = (opts: ResolverOptions<TParams>) => MaybePromise<void>;
type ErrorMessage<TError extends string> = TError;
interface UploadBuilder<TParams extends AnyParams> {
    input: <TParser extends JsonParser>(parser: TParams["_input"] extends UnsetMarker ? TParser : ErrorMessage<"input is already set">) => UploadBuilder<{
        _input: TParser["_output"];
        _metadata: TParams["_metadata"];
        _runtime: TParams["_runtime"];
        _errorShape: TParams["_errorShape"];
    }>;
    middleware: <TOutput extends Record<string, unknown>>(fn: TParams["_metadata"] extends UnsetMarker ? MiddlewareFn<TOutput, TParams> : ErrorMessage<"middleware is already set">) => UploadBuilder<{
        _input: TParams["_input"];
        _metadata: TOutput;
        _runtime: TParams["_runtime"];
        _errorShape: TParams["_errorShape"];
    }>;
    onUploadComplete: (fn: ResolverFn<TParams>) => Uploader<TParams>;
}
type UploadBuilderDef<TParams extends AnyParams> = {
    routerConfig: FileRouterInputConfig;
    inputParser: JsonParser;
    middleware: MiddlewareFn<{}, TParams>;
    errorFormatter: (err: UploadThingError) => TParams["_errorShape"];
};
interface Uploader<TParams extends AnyParams> {
    _def: TParams & UploadBuilderDef<TParams>;
    resolver: ResolverFn<TParams>;
}
type FileRouter<TParams extends AnyParams = AnyParams> = Record<string, Uploader<TParams>>;
type inferEndpointInput<TUploader extends Uploader<any>> = TUploader["_def"]["_input"] extends UnsetMarker ? undefined : TUploader["_def"]["_input"];
type inferErrorShape<TRouter extends FileRouter> = TRouter[keyof TRouter]["_def"]["_errorShape"];

export { AnyRuntime as A, ErrorMessage as E, FileRouter as F, MaybePromise as M, Simplify as S, UploadBuilder as U, UnsetMarker as a, AnyParams as b, UploadBuilderDef as c, Uploader as d, inferErrorShape as e, inferEndpointInput as i, unsetMarker as u };
