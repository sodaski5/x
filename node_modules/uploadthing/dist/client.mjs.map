{"version":3,"sources":["../src/client.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-argument */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport { pollForFileData, UploadThingError } from \"@uploadthing/shared\";\n\nimport type { FileRouter, inferEndpointInput } from \"./internal/types\";\n\nfunction fetchWithProgress(\n  url: string,\n  opts: {\n    headers?: Headers;\n    method?: string;\n    body?: string | FormData;\n  } = {},\n  onProgress?: (this: XMLHttpRequest, progress: ProgressEvent) => void,\n) {\n  return new Promise<XMLHttpRequest>((res, rej) => {\n    const xhr = new XMLHttpRequest();\n    xhr.open(opts.method || \"get\", url);\n    opts.headers &&\n      Object.keys(opts.headers).forEach(\n        (h) =>\n          opts.headers && xhr.setRequestHeader(h, opts.headers.get(h) ?? \"\"),\n      );\n    xhr.onload = (e) => {\n      res(e.target as XMLHttpRequest);\n    };\n\n    xhr.onerror = rej;\n    if (xhr.upload && onProgress) xhr.upload.onprogress = onProgress;\n    xhr.send(opts.body);\n  });\n}\n\nconst createRequestPermsUrl = (config: { url?: string; slug: string }) => {\n  const queryParams = `?actionType=upload&slug=${config.slug}`;\n\n  return `${config?.url ?? \"/api/uploadthing\"}${queryParams}`;\n};\n\ntype UploadFilesOptions<TRouter extends FileRouter> = {\n  [TEndpoint in keyof TRouter]: {\n    endpoint: TEndpoint;\n    onUploadProgress?: ({\n      file,\n      progress,\n    }: {\n      file: string;\n      progress: number;\n    }) => void;\n    input?: inferEndpointInput<TRouter[TEndpoint]>;\n\n    files: File[];\n  };\n}[keyof TRouter];\n\nexport type UploadFileResponse = {\n  /**\n   * @deprecated\n   * use `name` instead\n   */\n  fileName: string;\n  name: string;\n  /**\n   * @deprecated\n   * use `size` instead\n   */\n  fileSize: number;\n  size: number;\n  /**\n   * @deprecated\n   * use `key` instead\n   */\n  fileKey: string;\n  key: string;\n  /**\n   * @deprecated\n   * use `url` instead\n   */\n  fileUrl: string;\n  url: string;\n};\n\nexport const DANGEROUS__uploadFiles = async <TRouter extends FileRouter>(\n  opts: UploadFilesOptions<TRouter>,\n  config?: {\n    url?: string;\n  },\n) => {\n  // Get presigned URL for S3 upload\n  const s3ConnectionRes = await fetch(\n    createRequestPermsUrl({\n      url: config?.url,\n      slug: String(opts.endpoint),\n    }),\n    {\n      method: \"POST\",\n      body: JSON.stringify({\n        files: opts.files.map((f) => f.name),\n        input: opts.input,\n      }),\n    },\n  ).then(async (res) => {\n    // check for 200 response\n    if (!res.ok) {\n      const error = await UploadThingError.fromResponse(res);\n      throw error;\n    }\n\n    // attempt to parse response\n    try {\n      return res.json();\n    } catch (e) {\n      // response is not JSON\n      console.error(e);\n      throw new UploadThingError({\n        code: \"BAD_REQUEST\",\n        message: `Failed to parse response as JSON. Got: ${res.body}`,\n        cause: e,\n      });\n    }\n  });\n\n  if (!s3ConnectionRes || !Array.isArray(s3ConnectionRes)) {\n    throw new UploadThingError({\n      code: \"BAD_REQUEST\",\n      message: \"No URL. How did you even get here?\",\n      cause: s3ConnectionRes,\n    });\n  }\n\n  const fileUploadPromises = s3ConnectionRes.map(async (presigned: any) => {\n    const file = opts.files.find((f) => f.name === presigned.name);\n\n    if (!file) {\n      console.error(\"No file found for presigned URL\", presigned);\n      throw new UploadThingError({\n        code: \"NOT_FOUND\",\n        message: \"No file found for presigned URL\",\n        cause: `Expected file with name ${\n          presigned.name\n        } but got '${opts.files.join(\",\")}'`,\n      });\n    }\n    const { url, fields } = presigned.presignedUrl;\n    const formData = new FormData();\n\n    // Give content type to blobs because S3 is dumb\n    // check if content-type is one of the allowed types, or if not and blobs are allowed, use application/octet-stream\n    if (\n      presigned.fileType === file.type.split(\"/\")[0] ||\n      presigned.fileType === file.type\n    ) {\n      formData.append(\"Content-Type\", file.type);\n    } else if (presigned.fileType === \"blob\") {\n      formData.append(\"Content-Type\", \"application/octet-stream\");\n    } else if (presigned.fileType === \"pdf\") {\n      formData.append(\"Content-Type\", \"application/pdf\");\n    }\n\n    // Dump all values from response (+ the file itself) into form for S3 upload\n    Object.entries({ ...fields, file: file }).forEach(([key, value]) => {\n      formData.append(key, value as Blob);\n    });\n\n    // Do S3 upload\n    const upload = await fetchWithProgress(\n      url,\n      {\n        method: \"POST\",\n        body: formData,\n        headers: new Headers({\n          Accept: \"application/xml\",\n        }),\n      },\n      (progressEvent) =>\n        opts.onUploadProgress &&\n        opts.onUploadProgress({\n          file: file.name,\n          progress: (progressEvent.loaded / progressEvent.total) * 100,\n        }),\n    );\n\n    if (upload.status > 299 || upload.status < 200) {\n      throw new UploadThingError({\n        code: \"UPLOAD_FAILED\",\n        message: `Failed to upload file ${file.name} to S3`,\n        cause: upload.statusText,\n      });\n    }\n\n    // Generate a URL for the uploaded image since AWS won't give me one\n    const genUrl =\n      \"https://uploadthing.com/f/\" + encodeURIComponent(fields[\"key\"]);\n\n    // Poll for file data, this way we know that the client-side onUploadComplete callback will be called after the server-side version\n    await pollForFileData(presigned.key);\n\n    // TODO: remove `file` prefix in next major version\n    const ret: UploadFileResponse = {\n      fileName: file.name,\n      name: file.name,\n      fileSize: file.size,\n      size: file.size,\n      fileKey: presigned.key,\n      key: presigned.key,\n      fileUrl: genUrl,\n      url: genUrl,\n    };\n    return ret;\n  });\n\n  return Promise.all(fileUploadPromises);\n};\n\nexport const genUploader = <\n  TRouter extends FileRouter,\n>(): typeof DANGEROUS__uploadFiles<TRouter> => {\n  return DANGEROUS__uploadFiles;\n};\n\nexport const classNames = (...classes: Array<string | boolean>) => {\n  return classes.filter(Boolean).join(\" \");\n};\n\nexport const generateMimeTypes = (fileTypes: string[]) => {\n  const accepted = fileTypes.map((type) => {\n    if (type === \"blob\") return \"blob\";\n    if (type === \"pdf\") return \"application/pdf\";\n    if (type.includes(\"/\")) return type;\n    else return `${type}/*`;\n  });\n\n  if (accepted.includes(\"blob\")) {\n    return undefined;\n  }\n  return accepted;\n};\n\nexport const generateClientDropzoneAccept = (fileTypes: string[]) => {\n  const mimeTypes = generateMimeTypes(fileTypes);\n\n  if (!mimeTypes) return undefined;\n\n  return Object.fromEntries(mimeTypes.map((type) => [type, []]));\n};\n"],"mappings":"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","names":[]}