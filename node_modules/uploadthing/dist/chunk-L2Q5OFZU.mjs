import {
  UPLOADTHING_VERSION,
  buildPermissionsInfoHandler,
  buildRequestHandler,
  createBuilder,
  defaultErrorFormatter
} from "./chunk-TZQC4LRV.mjs";

// src/internal/next/approuter.ts
import { getStatusCodeFromError, UploadThingError } from "@uploadthing/shared";
var createNextRouteHandler = (opts) => {
  const requestHandler = buildRequestHandler(opts);
  const POST = async (req) => {
    var _a;
    const response = await requestHandler({ req });
    const errorFormatter = ((_a = opts.router[Object.keys(opts.router)[0]]) == null ? void 0 : _a._def.errorFormatter) ?? defaultErrorFormatter;
    if (response instanceof UploadThingError) {
      const formattedError = errorFormatter(
        response
      );
      return new Response(JSON.stringify(formattedError), {
        status: getStatusCodeFromError(response),
        headers: {
          "x-uploadthing-version": UPLOADTHING_VERSION
        }
      });
    }
    if (response.status !== 200) {
      return new Response("An unknown error occured", {
        status: 500,
        headers: {
          "x-uploadthing-version": UPLOADTHING_VERSION
        }
      });
    }
    return new Response(JSON.stringify(response.body), {
      status: response.status,
      headers: {
        "x-uploadthing-version": UPLOADTHING_VERSION
      }
    });
  };
  const getBuildPerms = buildPermissionsInfoHandler(opts);
  const GET = () => {
    return new Response(JSON.stringify(getBuildPerms()), {
      status: 200,
      headers: {
        "x-uploadthing-version": UPLOADTHING_VERSION
      }
    });
  };
  return { GET, POST };
};

// src/next.ts
var createUploadthing = (opts) => createBuilder(opts);

export {
  createNextRouteHandler,
  createUploadthing
};
//# sourceMappingURL=chunk-L2Q5OFZU.mjs.map