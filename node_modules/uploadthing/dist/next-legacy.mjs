import {
  UPLOADTHING_VERSION,
  buildPermissionsInfoHandler,
  buildRequestHandler,
  createBuilder,
  defaultErrorFormatter
} from "./chunk-TZQC4LRV.mjs";
import "./chunk-4NWFEIIR.mjs";

// src/internal/next/pagerouter.ts
import { getStatusCodeFromError, UploadThingError } from "@uploadthing/shared";
var createNextPageApiHandler = (opts) => {
  var _a;
  const requestHandler = buildRequestHandler(opts);
  const errorFormatter = ((_a = opts.router[Object.keys(opts.router)[0]]) == null ? void 0 : _a._def.errorFormatter) ?? defaultErrorFormatter;
  const getBuildPerms = buildPermissionsInfoHandler(opts);
  return async (req, res) => {
    if (req.method === "GET") {
      const perms = getBuildPerms();
      res.status(200).json(perms);
      return;
    }
    const standardRequest = {
      ...req,
      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
      json: () => Promise.resolve(JSON.parse(req.body)),
      headers: {
        get: (key) => req.headers[key]
      }
    };
    const response = await requestHandler({
      req: standardRequest,
      res
    });
    res.setHeader("x-uploadthing-version", UPLOADTHING_VERSION);
    if (response instanceof UploadThingError) {
      res.status(getStatusCodeFromError(response));
      res.setHeader("x-uploadthing-version", UPLOADTHING_VERSION);
      const formattedError = errorFormatter(
        response
      );
      return res.json(formattedError);
    }
    if (response.status !== 200) {
      res.status(500);
      return res.send("An unknown error occured");
    }
    res.status(response.status);
    return res.json(response.body);
  };
};

// src/next-legacy.ts
var createUploadthing = (opts) => createBuilder(opts);
export {
  createNextPageApiHandler,
  createUploadthing
};
//# sourceMappingURL=next-legacy.mjs.map