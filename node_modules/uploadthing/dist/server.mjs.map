{"version":3,"sources":["../src/internal/types.ts","../src/sdk/index.ts","../src/sdk/utils.ts","../src/internal/edge.ts","../src/server.ts"],"sourcesContent":["import type { NextApiRequest, NextApiResponse } from \"next\";\nimport type { NextRequest } from \"next/server\";\n\nimport type {\n  FileRouterInputConfig,\n  UploadedFile,\n  UploadThingError,\n} from \"@uploadthing/shared\";\n\nimport type { JsonParser } from \"./parser\";\n\n//\n// Utils\nexport const unsetMarker = \"unsetMarker\" as \"unsetMarker\" & {\n  __brand: \"unsetMarker\";\n};\nexport type UnsetMarker = typeof unsetMarker;\n\nexport type Simplify<TType> = { [TKey in keyof TType]: TType[TKey] } & {};\n\nexport type MaybePromise<TType> = TType | Promise<TType>;\n\n//\n// Package\ntype ResolverOptions<TParams extends AnyParams> = {\n  metadata: Simplify<\n    TParams[\"_metadata\"] extends UnsetMarker ? undefined : TParams[\"_metadata\"]\n  >;\n\n  file: UploadedFile;\n};\n\nexport type AnyRuntime = \"app\" | \"pages\" | \"web\";\nexport interface AnyParams {\n  _input: any;\n  _metadata: any; // imaginary field used to bind metadata return type to an Upload resolver\n  _runtime: any;\n  _errorShape: any;\n}\n\ntype MiddlewareFnArgs<TParams extends AnyParams> =\n  TParams[\"_runtime\"] extends \"web\"\n    ? { req: Request; res?: never; input: TParams[\"_input\"] }\n    : TParams[\"_runtime\"] extends \"app\"\n    ? { req: NextRequest; res?: never; input: TParams[\"_input\"] }\n    : { req: NextApiRequest; res: NextApiResponse; input: TParams[\"_input\"] };\n\ntype MiddlewareFn<\n  TOutput extends Record<string, unknown>,\n  TParams extends AnyParams,\n> = (opts: MiddlewareFnArgs<TParams>) => MaybePromise<TOutput>;\n\ntype ResolverFn<TParams extends AnyParams> = (\n  opts: ResolverOptions<TParams>,\n) => MaybePromise<void>;\n\nexport type ErrorMessage<TError extends string> = TError;\n\nexport interface UploadBuilder<TParams extends AnyParams> {\n  input: <TParser extends JsonParser>(\n    parser: TParams[\"_input\"] extends UnsetMarker\n      ? TParser\n      : ErrorMessage<\"input is already set\">,\n  ) => UploadBuilder<{\n    _input: TParser[\"_output\"];\n    _metadata: TParams[\"_metadata\"];\n    _runtime: TParams[\"_runtime\"];\n    _errorShape: TParams[\"_errorShape\"];\n  }>;\n  middleware: <TOutput extends Record<string, unknown>>(\n    fn: TParams[\"_metadata\"] extends UnsetMarker\n      ? MiddlewareFn<TOutput, TParams>\n      : ErrorMessage<\"middleware is already set\">,\n  ) => UploadBuilder<{\n    _input: TParams[\"_input\"];\n    _metadata: TOutput;\n    _runtime: TParams[\"_runtime\"];\n    _errorShape: TParams[\"_errorShape\"];\n  }>;\n\n  onUploadComplete: (fn: ResolverFn<TParams>) => Uploader<TParams>;\n}\n\nexport type UploadBuilderDef<TParams extends AnyParams> = {\n  routerConfig: FileRouterInputConfig;\n  inputParser: JsonParser;\n  middleware: MiddlewareFn<{}, TParams>;\n  errorFormatter: (err: UploadThingError) => TParams[\"_errorShape\"];\n};\n\nexport interface Uploader<TParams extends AnyParams> {\n  _def: TParams & UploadBuilderDef<TParams>;\n  resolver: ResolverFn<TParams>;\n}\n\nexport type FileRouter<TParams extends AnyParams = AnyParams> = Record<\n  string,\n  Uploader<TParams>\n>;\n\nexport type inferEndpointInput<TUploader extends Uploader<any>> =\n  TUploader[\"_def\"][\"_input\"] extends UnsetMarker\n    ? undefined\n    : TUploader[\"_def\"][\"_input\"];\n\nexport type inferErrorShape<TRouter extends FileRouter> =\n  TRouter[keyof TRouter][\"_def\"][\"_errorShape\"];\n","import type { Json } from \"@uploadthing/shared\";\nimport { generateUploadThingURL, UploadThingError } from \"@uploadthing/shared\";\n\nimport { UPLOADTHING_VERSION } from \"../constants\";\nimport type { FileEsque, UploadData, UploadError } from \"./utils\";\nimport { uploadFilesInternal } from \"./utils\";\n\nfunction guardServerOnly() {\n  if (typeof window !== \"undefined\") {\n    throw new UploadThingError({\n      code: \"INTERNAL_SERVER_ERROR\",\n      message: \"The `utapi` can only be used on the server.\",\n    });\n  }\n}\n\nfunction getApiKeyOrThrow() {\n  if (!process.env.UPLOADTHING_SECRET) {\n    throw new UploadThingError({\n      code: \"MISSING_ENV\",\n      message: \"Missing `UPLOADTHING_SECRET` env variable.\",\n    });\n  }\n  return process.env.UPLOADTHING_SECRET;\n}\n\ntype UploadFileResponse =\n  | { data: UploadData; error: null }\n  | { data: null; error: UploadError };\n\n/**\n * @param {FileEsque | FileEsque[]} files The file(s) to upload\n * @param {Json} metadata JSON-parseable metadata to attach to the uploaded file(s)\n *\n * @example\n * await uploadFiles(new File([\"foo\"], \"foo.txt\"));\n *\n * @example\n * await uploadFiles([\n *   new File([\"foo\"], \"foo.txt\"),\n *   new File([\"bar\"], \"bar.txt\"),\n * ]);\n */\nexport const uploadFiles = async <T extends FileEsque | FileEsque[]>(\n  files: T,\n  metadata: Json = {},\n) => {\n  guardServerOnly();\n\n  const filesToUpload: FileEsque[] = Array.isArray(files) ? files : [files];\n\n  const uploads = await uploadFilesInternal(\n    {\n      files: filesToUpload,\n      metadata,\n    },\n    {\n      apiKey: getApiKeyOrThrow(),\n      utVersion: UPLOADTHING_VERSION,\n    },\n  );\n\n  const uploadFileResponse = Array.isArray(files) ? uploads : uploads[0];\n\n  return uploadFileResponse as T extends FileEsque[]\n    ? UploadFileResponse[]\n    : UploadFileResponse;\n};\n\n/**\n * @param {string} url The URL of the file to upload\n * @param {Json} metadata JSON-parseable metadata to attach to the uploaded file(s)\n *\n * @example\n * await uploadFileFromUrl(\"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\");\n *\n * @example\n * await uploadFileFromUrl([\n *   \"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\n *   \"https://uploadthing.com/f/1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"\n * ])\n */\ntype Url = string | URL;\nexport const uploadFilesFromUrl = async <T extends Url | Url[]>(\n  urls: T,\n  metadata: Json = {},\n) => {\n  guardServerOnly();\n\n  const fileUrls: Url[] = Array.isArray(urls) ? urls : [urls];\n\n  const formData = new FormData();\n  formData.append(\"metadata\", JSON.stringify(metadata));\n\n  const filesToUpload = await Promise.all(\n    fileUrls.map(async (url) => {\n      if (typeof url === \"string\") url = new URL(url);\n      const filename = url.pathname.split(\"/\").pop() ?? \"unknown-filename\";\n\n      // Download the file on the user's server to avoid egress charges\n      const fileResponse = await fetch(url);\n      if (!fileResponse.ok) {\n        throw new UploadThingError({\n          code: \"BAD_REQUEST\",\n          message: \"Failed to download requested file.\",\n          cause: fileResponse,\n        });\n      }\n      const blob = await fileResponse.blob();\n      return Object.assign(blob, { name: filename });\n    }),\n  );\n\n  const uploads = await uploadFilesInternal(\n    {\n      files: filesToUpload,\n      metadata,\n    },\n    {\n      apiKey: getApiKeyOrThrow(),\n      utVersion: UPLOADTHING_VERSION,\n    },\n  );\n\n  const uploadFileResponse = Array.isArray(urls) ? uploads : uploads[0];\n\n  return uploadFileResponse as T extends Url[]\n    ? UploadFileResponse[]\n    : UploadFileResponse;\n};\n\n/**\n * Request to delete files from UploadThing storage.\n * @param {string | string[]} fileKeys\n *\n * @example\n * await deleteFiles(\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\");\n *\n * @example\n * await deleteFiles([\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"])\n */\nexport const deleteFiles = async (fileKeys: string[] | string) => {\n  guardServerOnly();\n\n  if (!Array.isArray(fileKeys)) fileKeys = [fileKeys];\n\n  const res = await fetch(generateUploadThingURL(\"/api/deleteFile\"), {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-uploadthing-api-key\": getApiKeyOrThrow(),\n      \"x-uploadthing-version\": UPLOADTHING_VERSION,\n    },\n    body: JSON.stringify({ fileKeys }),\n  });\n\n  if (!res.ok) {\n    throw new Error(\"Failed to delete files\");\n  }\n\n  return res.json() as Promise<{ success: boolean }>;\n};\n\n/**\n * Request file URLs from UploadThing storage.\n * @param {string | string[]} fileKeys\n *\n * @example\n * const data = await getFileUrls(\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\");\n * console.log(data); // [{key: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", url: \"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\"}]\n *\n * @example\n * const data = await getFileUrls([\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"])\n * console.log(data) // [{key: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", url: \"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\" },{key: \"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\", url: \"https://uploadthing.com/f/1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"}]\n */\nexport const getFileUrls = async (fileKeys: string[] | string) => {\n  guardServerOnly();\n\n  if (!Array.isArray(fileKeys)) fileKeys = [fileKeys];\n\n  const res = await fetch(generateUploadThingURL(\"/api/getFileUrl\"), {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-uploadthing-api-key\": getApiKeyOrThrow(),\n      \"x-uploadthing-version\": UPLOADTHING_VERSION,\n    },\n    body: JSON.stringify({ fileKeys }),\n  });\n\n  if (!res.ok) {\n    throw new Error(\"Failed to get file urls\");\n  }\n\n  return res.json().then(({ data }) => data as { key: string; url: string }[]);\n};\n\n/**\n * Request file list from UploadThing storage.\n *\n * @example\n * const data = await listFiles();\n * console.log(data); // { key: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", id: \"2e0fdb64-9957-4262-8e45-f372ba903ac8\" }\n */\nexport const listFiles = async () => {\n  guardServerOnly();\n\n  // TODO: Implement filtering and pagination\n  const res = await fetch(generateUploadThingURL(\"/api/listFiles\"), {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-uploadthing-api-key\": getApiKeyOrThrow(),\n      \"x-uploadthing-version\": UPLOADTHING_VERSION,\n    },\n  });\n\n  const json = (await res.json()) as\n    | { files: { key: string; id: string }[] }\n    | { error: string };\n\n  if (!res.ok || \"error\" in json) {\n    const message = \"error\" in json ? json.error : \"Unknown error\";\n    throw new Error(message);\n  }\n\n  return json.files;\n};\n\n/**\n * Rename a file in UploadThing storage.\n *\n * type Rename = {\n *   fileKey: string;\n *   newName: string; // Should include file extension\n * };\n *\n * @param {Rename | Rename[]} updates\n *\n * @example\n * await renameFile({ fileKey: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", newName: \"new_image.jpg\" });\n *\n * @example\n * await renameFile([{ fileKey: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", newName: \"new_image.jpg\" }, { fileKey: \"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\", newName: \"new_image2.jpg\" }]);\n *\n */\n\ntype Rename = {\n  fileKey: string;\n  newName: string;\n};\n\nexport const renameFile = async (updates: Rename | Rename[]) => {\n  guardServerOnly();\n\n  if (!Array.isArray(updates)) updates = [updates];\n\n  const res = await fetch(generateUploadThingURL(\"/api/renameFile\"), {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-uploadthing-api-key\": getApiKeyOrThrow(),\n      \"x-uploadthing-version\": UPLOADTHING_VERSION,\n    },\n    body: JSON.stringify({ updates }),\n  });\n\n  const json = (await res.json()) as { success: true } | { error: string };\n\n  if (!res.ok || \"error\" in json) {\n    const message = \"error\" in json ? json.error : \"Unknown error\";\n    throw new Error(message);\n  }\n\n  return json;\n};\n","import type { Json } from \"@uploadthing/shared\";\nimport {\n  generateUploadThingURL,\n  pollForFileData,\n  UploadThingError,\n} from \"@uploadthing/shared\";\n\nexport type FileEsque = Blob & { name: string };\n\nexport type UploadData = {\n  key: string;\n  url: string;\n  name: string;\n  size: number;\n};\n\nexport type UploadError = {\n  code: string;\n  message: string;\n  data: any;\n};\n\nexport const uploadFilesInternal = async (\n  data: {\n    files: FileEsque[];\n    metadata: Json;\n  },\n  opts: {\n    apiKey: string;\n    utVersion: string;\n  },\n) => {\n  // Request presigned URLs for each file\n  const fileData = data.files.map((file) => ({\n    name: file.name,\n    type: file.type,\n    size: file.size,\n  }));\n  const res = await fetch(generateUploadThingURL(\"/api/uploadFiles\"), {\n    method: \"POST\",\n    headers: {\n      \"x-uploadthing-api-key\": opts.apiKey,\n      \"x-uploadthing-version\": opts.utVersion,\n    },\n    cache: \"no-store\",\n    body: JSON.stringify({\n      files: fileData,\n      metadata: data.metadata,\n    }),\n  });\n\n  const json = (await res.json()) as\n    | {\n        data: {\n          presignedUrl: string; // url to post to\n          fields: Record<string, string>;\n          key: string;\n          fileUrl: string; // the final url of the file after upload\n        }[];\n      }\n    | { error: string };\n\n  if (!res.ok || \"error\" in json) {\n    throw UploadThingError.fromResponse(res);\n  }\n\n  // Upload each file to S3\n  const uploads = await Promise.allSettled(\n    data.files.map(async (file, i) => {\n      const { presignedUrl, fields, key, fileUrl } = json.data[i];\n\n      if (!presignedUrl || !fields) {\n        throw new UploadThingError({\n          code: \"URL_GENERATION_FAILED\",\n          message: \"Failed to generate presigned URL\",\n          cause: JSON.stringify(json.data[i]),\n        });\n      }\n\n      const formData = new FormData();\n      formData.append(\"Content-Type\", file.type);\n      Object.entries(fields).forEach(([key, value]) => {\n        formData.append(key, value);\n      });\n      formData.append(\"file\", file);\n\n      // Do S3 upload\n      const s3res = await fetch(presignedUrl, {\n        method: \"POST\",\n        body: formData,\n        headers: new Headers({\n          Accept: \"application/xml\",\n        }),\n      });\n\n      if (!s3res.ok) {\n        throw new UploadThingError({\n          code: \"UPLOAD_FAILED\",\n          message: \"Failed to upload file to storage provider\",\n          cause: s3res,\n        });\n      }\n\n      // Poll for file to be available\n      await pollForFileData(key);\n\n      return {\n        key,\n        url: fileUrl,\n        name: file.name,\n        size: file.size,\n      };\n    }),\n  );\n\n  return uploads.map((upload) => {\n    if (upload.status === \"fulfilled\") {\n      const data = upload.value satisfies UploadData;\n      return { data, error: null };\n    }\n    // We only throw UploadThingErrors, so this is safe\n    const reason = upload.reason as UploadThingError;\n    const error = UploadThingError.toObject(reason) satisfies UploadError;\n    return { data: null, error };\n  });\n};\n","import { createNextRouteHandler } from \"../next\";\n\nexport const createServerHandler = (\n  ...args: Parameters<typeof createNextRouteHandler>\n) => {\n  const handler = createNextRouteHandler(...args);\n  const thisHandler =\n    (method: keyof typeof handler) => (event: { request: Request } | Request) =>\n      handler[method](event instanceof Request ? event : event.request);\n  return {\n    GET: thisHandler(\"GET\"),\n    POST: thisHandler(\"POST\"),\n  };\n};\n","import type { Json } from \"@uploadthing/shared\";\n\nimport type { CreateBuilderOptions } from \"./internal/upload-builder\";\nimport { createBuilder } from \"./internal/upload-builder\";\n\nexport * from \"./internal/types\";\nexport * as utapi from \"./sdk\";\nexport { createServerHandler } from \"./internal/edge\";\n\nexport const createUploadthing = <TErrorShape extends Json>(\n  opts?: CreateBuilderOptions<TErrorShape>,\n) => createBuilder<\"web\", TErrorShape>(opts);\n"],"mappings":"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","names":["generateUploadThingURL","UploadThingError","key","data","UploadThingError","generateUploadThingURL"]}