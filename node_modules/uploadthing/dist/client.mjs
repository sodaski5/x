import "./chunk-4NWFEIIR.mjs";

// src/client.ts
import { pollForFileData, UploadThingError } from "@uploadthing/shared";
function fetchWithProgress(url, opts = {}, onProgress) {
  return new Promise((res, rej) => {
    const xhr = new XMLHttpRequest();
    xhr.open(opts.method || "get", url);
    opts.headers && Object.keys(opts.headers).forEach(
      (h) => opts.headers && xhr.setRequestHeader(h, opts.headers.get(h) ?? "")
    );
    xhr.onload = (e) => {
      res(e.target);
    };
    xhr.onerror = rej;
    if (xhr.upload && onProgress)
      xhr.upload.onprogress = onProgress;
    xhr.send(opts.body);
  });
}
var createRequestPermsUrl = (config) => {
  const queryParams = `?actionType=upload&slug=${config.slug}`;
  return `${(config == null ? void 0 : config.url) ?? "/api/uploadthing"}${queryParams}`;
};
var DANGEROUS__uploadFiles = async (opts, config) => {
  const s3ConnectionRes = await fetch(
    createRequestPermsUrl({
      url: config == null ? void 0 : config.url,
      slug: String(opts.endpoint)
    }),
    {
      method: "POST",
      body: JSON.stringify({
        files: opts.files.map((f) => f.name),
        input: opts.input
      })
    }
  ).then(async (res) => {
    if (!res.ok) {
      const error = await UploadThingError.fromResponse(res);
      throw error;
    }
    try {
      return res.json();
    } catch (e) {
      console.error(e);
      throw new UploadThingError({
        code: "BAD_REQUEST",
        message: `Failed to parse response as JSON. Got: ${res.body}`,
        cause: e
      });
    }
  });
  if (!s3ConnectionRes || !Array.isArray(s3ConnectionRes)) {
    throw new UploadThingError({
      code: "BAD_REQUEST",
      message: "No URL. How did you even get here?",
      cause: s3ConnectionRes
    });
  }
  const fileUploadPromises = s3ConnectionRes.map(async (presigned) => {
    const file = opts.files.find((f) => f.name === presigned.name);
    if (!file) {
      console.error("No file found for presigned URL", presigned);
      throw new UploadThingError({
        code: "NOT_FOUND",
        message: "No file found for presigned URL",
        cause: `Expected file with name ${presigned.name} but got '${opts.files.join(",")}'`
      });
    }
    const { url, fields } = presigned.presignedUrl;
    const formData = new FormData();
    if (presigned.fileType === file.type.split("/")[0] || presigned.fileType === file.type) {
      formData.append("Content-Type", file.type);
    } else if (presigned.fileType === "blob") {
      formData.append("Content-Type", "application/octet-stream");
    } else if (presigned.fileType === "pdf") {
      formData.append("Content-Type", "application/pdf");
    }
    Object.entries({ ...fields, file }).forEach(([key, value]) => {
      formData.append(key, value);
    });
    const upload = await fetchWithProgress(
      url,
      {
        method: "POST",
        body: formData,
        headers: new Headers({
          Accept: "application/xml"
        })
      },
      (progressEvent) => opts.onUploadProgress && opts.onUploadProgress({
        file: file.name,
        progress: progressEvent.loaded / progressEvent.total * 100
      })
    );
    if (upload.status > 299 || upload.status < 200) {
      throw new UploadThingError({
        code: "UPLOAD_FAILED",
        message: `Failed to upload file ${file.name} to S3`,
        cause: upload.statusText
      });
    }
    const genUrl = "https://uploadthing.com/f/" + encodeURIComponent(fields["key"]);
    await pollForFileData(presigned.key);
    const ret = {
      fileName: file.name,
      name: file.name,
      fileSize: file.size,
      size: file.size,
      fileKey: presigned.key,
      key: presigned.key,
      fileUrl: genUrl,
      url: genUrl
    };
    return ret;
  });
  return Promise.all(fileUploadPromises);
};
var genUploader = () => {
  return DANGEROUS__uploadFiles;
};
var classNames = (...classes) => {
  return classes.filter(Boolean).join(" ");
};
var generateMimeTypes = (fileTypes) => {
  const accepted = fileTypes.map((type) => {
    if (type === "blob")
      return "blob";
    if (type === "pdf")
      return "application/pdf";
    if (type.includes("/"))
      return type;
    else
      return `${type}/*`;
  });
  if (accepted.includes("blob")) {
    return void 0;
  }
  return accepted;
};
var generateClientDropzoneAccept = (fileTypes) => {
  const mimeTypes = generateMimeTypes(fileTypes);
  if (!mimeTypes)
    return void 0;
  return Object.fromEntries(mimeTypes.map((type) => [type, []]));
};
export {
  DANGEROUS__uploadFiles,
  classNames,
  genUploader,
  generateClientDropzoneAccept,
  generateMimeTypes
};
//# sourceMappingURL=client.mjs.map