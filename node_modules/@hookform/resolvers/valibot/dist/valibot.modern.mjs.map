{"version":3,"file":"valibot.modern.mjs","sources":["../src/valibot.ts"],"sourcesContent":["import { toNestError } from '@hookform/resolvers';\nimport type { Resolver } from './types';\nimport {\n  BaseSchema,\n  BaseSchemaAsync,\n  ValiError,\n  parse,\n  parseAsync,\n} from 'valibot';\nimport { FieldErrors, FieldError } from 'react-hook-form';\n\ntype FlatErrors = Record<string, [FieldError, ...FieldError[]]>;\n\nconst parseErrors = (error: ValiError): FieldErrors => {\n  const errors = error.issues.reduce<FlatErrors>((flatErrors, issue) => {\n    if (issue.path) {\n      const path = issue.path.map(({ key }) => key).join('.');\n      flatErrors[path] = [\n        ...(flatErrors[path] || []),\n        {\n          message: issue.message,\n          type: issue.validation,\n        },\n      ];\n    }\n\n    return flatErrors;\n  }, {});\n\n  return Object.entries(errors).reduce<FieldErrors>((acc, [path, errors]) => {\n    const [firstError] = errors;\n    acc[path] = {\n      message: firstError.message,\n      type: firstError.type,\n    };\n\n    return acc;\n  }, {});\n};\n\nexport const valibotResolver: Resolver =\n  (\n    schema,\n    schemaOptions = {\n      abortEarly: false,\n      abortPipeEarly: false,\n    },\n    resolverOptions = {\n      mode: 'async',\n      raw: false,\n    },\n  ) =>\n  async (values, _, options) => {\n    try {\n      const { mode, raw } = resolverOptions;\n      const parsed =\n        mode === 'sync'\n          ? parse(schema as BaseSchema, values, schemaOptions)\n          : await parseAsync(\n              schema as BaseSchema | BaseSchemaAsync,\n              values,\n              schemaOptions,\n            );\n\n      return { values: raw ? values : parsed, errors: {} as FieldErrors };\n    } catch (error) {\n      if (error instanceof ValiError) {\n        return {\n          values: {},\n          errors: toNestError(parseErrors(error), options),\n        };\n      }\n\n      throw error;\n    }\n  };\n"],"names":["parseErrors","error","errors","issues","reduce","flatErrors","issue","path","map","key","join","message","type","validation","Object","entries","acc","firstError","valibotResolver","schema","schemaOptions","abortEarly","abortPipeEarly","resolverOptions","mode","raw","async","values","_","options","parsed","parse","parseAsync","ValiError","toNestError"],"mappings":"iHAaA,MAAMA,EAAeC,IACnB,MAAMC,EAASD,EAAME,OAAOC,OAAmB,CAACC,EAAYC,KAC1D,GAAIA,EAAMC,KAAM,CACd,MAAMA,EAAOD,EAAMC,KAAKC,IAAI,EAAGC,SAAUA,GAAKC,KAAK,KACnDL,EAAWE,GAAQ,IACbF,EAAWE,IAAS,GACxB,CACEI,QAASL,EAAMK,QACfC,KAAMN,EAAMO,YAGjB,CAED,OAAOR,GACN,CAAE,GAEL,OAAOS,OAAOC,QAAQb,GAAQE,OAAoB,CAACY,GAAMT,EAAML,MAC7D,MAAOe,GAAcf,EAMrB,OALAc,EAAIT,GAAQ,CACVI,QAASM,EAAWN,QACpBC,KAAMK,EAAWL,MAGZI,GACN,CAAA,EAAE,EAGME,EACXA,CACEC,EACAC,EAAgB,CACdC,YAAY,EACZC,gBAAgB,GAElBC,EAAkB,CAChBC,KAAM,QACNC,KAAK,KAGTC,MAAOC,EAAQC,EAAGC,KAChB,IACE,MAAML,KAAEA,EAAIC,IAAEA,GAAQF,EAChBO,EACK,SAATN,EACIO,EAAMZ,EAAsBQ,EAAQP,SAC9BY,EACJb,EACAQ,EACAP,GAGR,MAAO,CAAEO,OAAQF,EAAME,EAASG,EAAQ5B,OAAQ,GACjD,CAAC,MAAOD,GACP,GAAIA,aAAiBgC,EACnB,MAAO,CACLN,OAAQ,CAAE,EACVzB,OAAQgC,EAAYlC,EAAYC,GAAQ4B,IAI5C,MAAM5B,CACP"}